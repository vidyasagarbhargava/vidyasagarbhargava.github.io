[
  {
    "objectID": "projects/predictive_maintenance.html",
    "href": "projects/predictive_maintenance.html",
    "title": "Predictive Maintenance for NTORQ",
    "section": "",
    "text": "Tools : python\nMachine learning : Regression\nRole : Lead Data Scientist\nStatus : In progress"
  },
  {
    "objectID": "london.html",
    "href": "london.html",
    "title": "Namaste London üôè",
    "section": "",
    "text": "My short stay at London | 2019-2020"
  },
  {
    "objectID": "london.html#ucl-x-deepmind-lecture-series",
    "href": "london.html#ucl-x-deepmind-lecture-series",
    "title": "Namaste London üôè",
    "section": "UCL x DeepMind Lecture Series",
    "text": "UCL x DeepMind Lecture Series\nAttended amazing lecture series on deep learning by Deep Mind in early 2020 at UCL London."
  },
  {
    "objectID": "london.html#machine-learning-at-imperial-college-london",
    "href": "london.html#machine-learning-at-imperial-college-london",
    "title": "Namaste London üôè",
    "section": "Machine Learning at Imperial College London",
    "text": "Machine Learning at Imperial College London\nAttended few ml and nlp classes conducted by AI Core at Imperial College."
  },
  {
    "objectID": "london.html#r-conference-by-max-kuhn",
    "href": "london.html#r-conference-by-max-kuhn",
    "title": "Namaste London üôè",
    "section": "R-Conference by Max Kuhn",
    "text": "R-Conference by Max Kuhn\nGot the chance to attend live conference by Max Kuhn the developer famous R packages like Caret & tidymodels."
  },
  {
    "objectID": "london.html#somewhere-in-london",
    "href": "london.html#somewhere-in-london",
    "title": "Namaste London üôè",
    "section": "Somewhere in London",
    "text": "Somewhere in London"
  },
  {
    "objectID": "london.html#london-eye",
    "href": "london.html#london-eye",
    "title": "Namaste London üôè",
    "section": "London Eye",
    "text": "London Eye"
  },
  {
    "objectID": "london.html#london-bridge",
    "href": "london.html#london-bridge",
    "title": "Namaste London üôè",
    "section": "London Bridge",
    "text": "London Bridge\nA Mandatory London Bridge Picture"
  },
  {
    "objectID": "london.html#cricket-at-canary-wharf",
    "href": "london.html#cricket-at-canary-wharf",
    "title": "Namaste London üôè",
    "section": "Cricket at Canary Wharf",
    "text": "Cricket at Canary Wharf\nWatching cricket here during office breaks was fun."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects & Clients",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Vidyasagar Bhargava",
    "section": "",
    "text": "I‚Äôm a Lead Data Scientist at TVS Motor, working for connected mobility solutions department. My interests include Explainable AI, Computer Vision and Generative AI. I have 10+ years of experience in the field of Machine learning and Data Science where I worked with various clients in developing prescriptive as well as predictive solutions to address core business problems.\n\n\n\n\n\n\nRoot Cause Analysis for Low Range Trips in EVs\n\nPredictive Maintenance of Brakes in two wheelers\n\nRange Prediction and Analysis for EVs\nChurn Prediction in Telecom Industry\nPrice optimization Engine for Scientific Pricing of Fashion Products\nNPS Improvement using explainable AI\nRetail store segmentation\nAnomaly Detection for machine parts failure\n\n\n\n\n\nB.Tech in Computer Science and Engineering\nXII in Computer Science\n\n\n\n\n\nNeural Networks and Deep Learning\nImproving Deep Neural Networks: Hyperparameter Tuning, Regularization and Optimization\nBig Data Foundation\nIntroduction to Python\n\n\n\n\n\n\nThinking Hat at Wipro Limited | 2018\nBull‚Äôs Eye Award at Snapdeal | 2015\n\n\n\n\n\nIntroduction to Deep learning at Wipro Technologies on June 2017. [PPT]"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "CV",
    "section": "",
    "text": "Work Experience & Major Projects\n\nTVS Motor :- Lead Data Scientist (2021 - Present)\n\nPredictive Maintenace\nRange Prediction for Electric Vehicle\n\nWipro Technologies :- Specialist Data Science (2017 - 2021)\n\nChurn Prediction for Telecom Company\nNPS Improvement for US based client\nBenchmarking of trained sentence embedding models\nScaling Machine Learning models using Spark\nDashboard for Time Series forecasting using Dash & Plotly\n\nCognizant Techonology Solution :- Data Scientist (2016 - 2017)\n\nRetail store segmentation\nAnomaly Detection for machine parts failure\n\nSnapdeal :- Analyst Advanced Analytics (2014 - 2016)\n\nPrice optimization Engine\n\nPrice Elasticity Models\n\nLadyblush E-Commerce Pvt. Ltd (Start up) :- Engineer (2014 - 2014)\n\nE-commerce AI Chatbot\nData Analytics and Dashboarding\n\nShopclues :- Analyst (2013 - 2014)\n\nData Analytics and Dashboarding\n\n\n\nEducation\n\nB.Tech in Computer Science and Engineering\n\n\n\nCourses\n\nMachine Learning Course by Andrew NG\nDeep learning Course by Andrew NG\nBig Data Foundation by IBM\nIntroduction to Python by Kaggle\n\n\n\nTalks & Webinars\n\nIntroduction to Deep learning at Wipro Technologies on June 2017. [PPT]"
  },
  {
    "objectID": "myblog/posts/Fbeta-Measure/index.html",
    "href": "myblog/posts/Fbeta-Measure/index.html",
    "title": "Fbeta-Measure",
    "section": "",
    "text": "The F-measure or F score, also called as F1 score is calculated as the harmonic mean of precision and recall, giving each the same weighting. It allows a model to be evaluated taking both the precision and recall into account using a single score, which is helpful when describing the performance of the model and in comparing models.\n\n\n\\[\nF_{1}=2.\\frac{{precision} \\times {recall}}{{precision} + {recall}}\n\\]\nThe Fbeta-measure is a generalization of the F-measure that adds a configuration parameter called beta. A default beta value is 1.0, which is the same as the F-measure. A smaller beta value, such as 0.5, gives more weight to precision and less to recall, whereas a larger beta value, such as 2.0, gives less weight to precision and more weight to recall in the calculation of the score.\n\n\n\\[\nF_{{\\beta}} = \\frac{(1 + {\\beta}^2). (precision.recall)}{({\\beta}^2.precision+recall)}\n\\]\nSummary\n\nPrecision and recall provide two ways to summarize the errors made for the positive class in a binary classification problem.\n\nF-measure provides a single score that summarizes the precision and recall.\n\nFbeta-measure provides a configurable version of the F-measure to give more or less attention to the precision and recall measure when calculating a single score."
  },
  {
    "objectID": "myblog/posts/Successful-delivering-of-machine-learning-models/index.html",
    "href": "myblog/posts/Successful-delivering-of-machine-learning-models/index.html",
    "title": "Successful delivering of Machine Learning Projects",
    "section": "",
    "text": "1. Easy access to required data and a comprehensive data strategy\nThere is saying in computer science world ‚Äúgarbage in, garbage out‚Äù which means nonsense input data produces nonsense output. Therefore your machine learning model is only as good as the data it‚Äôs trained on.If there is problem with data, machine learning scientists will end up spending their time in doing data cleanup and management.So we need a strong data strategy to make efficient use of ML scientist‚Äôs time and talent.\nWhat makes a strong data strategy ?\n\nData should be viewed as organizational asset rather than property of individual department that created or collected that data.\nData should be available easily, securely and in compliance with legal and regulatory requirements.\nData is put to work through analytics and machine learning to make better decisions, create efficiencies and drive new innovations.\n\nData related questions to be asked before the start of ML project\n\nWhat data is available to me today?\nWhat data is not quite available, but with some effort could become available?\nWhat data I don‚Äôt have today, but I might have in next few months or year? And what steps can be taken to begin gathering that data?\nIs there any potential bias in data or data sources?\n\n\n\n2. Selecting machine learning use cases and setting success metrics\nWe should aim to use machine learning where it is actually needed and not where it might be interesting. Some times simple analytics or rules get you 10-40% of business impact.Things to keep in mind include data readiness, business impact and machine learning applicability.\n\nA high impact use case without data or machine learing applicability ‚ùå\nA use case with lots of data and high machine learning applicability but low business impact ‚ùå\n\nBefore working on a project the team needs estimate its potential impact as well (Opportunity Sizing). So once we define business problem which can be solved with machine learning and done with opportunity sizing the next step is to outlining clear metrics to measure success.\nThe data science projects needs to have clear goal which is typically a target value for a clearly defined metric. In real world data science projects there are not just one but multiple metrics that model will evaluated against. Some of these evaluation metric won‚Äôt even be related to how your prediction performs against the ground truth. Other such metrics are like :\n\nOverall memory usage\nlatency of the prediction process\ncomplexity of predictive model\n\nReal world problems are indeed dominated by business and tech infrastructure concerns.\n\n\n3. Technical experts and domain experts should work together\nWe need to make sure that domain experts and technical experts or stakeholders work side by side. If relevant stakeholders are the part of entire process, everyone is most likely to accept, adopt and implement the solution. If a data scientist is working in silos then its very much unlikely that their models get implemented.\n\n\n4. Exploratory data analysis\nBefore building the model,we need to interrogate the data to see if there is any predictive power in the feature set. Read more about EDA here.\n\n\n5. A quick MVP\nIts good practice to build a minimum viable product which is build quickly and cheaply to validate the hypothesis before we commit extensive time and resource.\n\n\n6. Experiment Metrics\nWe should look for more than one metric to look when an experiment concludes.\n\n\n7. Regular Check-ins\nRather than meeting at the start and end of a model build, it is better to check-in frequently (e.g.¬†once or twice a week) to discuss latest findings and align on if any course corrections are necessary."
  },
  {
    "objectID": "myblog/posts/Nearest-Neighbour-Classifier/index.html#strength",
    "href": "myblog/posts/Nearest-Neighbour-Classifier/index.html#strength",
    "title": "Nearest Neighbour Classifier",
    "section": "Strength",
    "text": "Strength\n\nSimple and effective\nMakes no assumption about data\nFast Training Process"
  },
  {
    "objectID": "myblog/posts/Nearest-Neighbour-Classifier/index.html#weakness",
    "href": "myblog/posts/Nearest-Neighbour-Classifier/index.html#weakness",
    "title": "Nearest Neighbour Classifier",
    "section": "Weakness",
    "text": "Weakness\n\nDoesn‚Äôt produce model, limiting the ability to understand how features are related to class\nRequires selection of k\nSlow classification phase\nCategorical features and missing data require pre processing\n\nThe k-Nearest Neighbor algorithm uses nearest k number of neighbors for labeling of an unlabeled example. The unlabeled test example is assigned the class of majority of the k-Nearest Neighbors.\nFor finding the distance k-NN algorithm uses Euclidean distance."
  },
  {
    "objectID": "myblog/posts/Nearest-Neighbour-Classifier/index.html#defining-the-dataset",
    "href": "myblog/posts/Nearest-Neighbour-Classifier/index.html#defining-the-dataset",
    "title": "Nearest Neighbour Classifier",
    "section": "Defining the dataset",
    "text": "Defining the dataset\n\n# First Feature\nweather=['Sunny','Sunny','Overcast','Rainy','Rainy','Rainy','Overcast','Sunny','Sunny',\n'Rainy','Sunny','Overcast','Overcast','Rainy']\n# Second Feature\ntemp=['Hot','Hot','Hot','Mild','Cool','Cool','Cool','Mild','Cool','Mild','Mild','Mild','Hot','Mild']\n\n# Label or target varible\nplay=['No','No','Yes','Yes','Yes','No','Yes','No','Yes','Yes','Yes','Yes','Yes','No']\n\nWe have two features weather and temperature and one label play."
  },
  {
    "objectID": "myblog/posts/Nearest-Neighbour-Classifier/index.html#encoding-data-columns",
    "href": "myblog/posts/Nearest-Neighbour-Classifier/index.html#encoding-data-columns",
    "title": "Nearest Neighbour Classifier",
    "section": "Encoding data columns",
    "text": "Encoding data columns\n\nfrom sklearn import preprocessing\n\n#creating labelEncoder\nle = preprocessing.LabelEncoder()\n\n# Converting string labels into numbers.\nweather_encoded=le.fit_transform(weather)\n\nSimilarly, you can encode temperature and label into numeric columns.\n\n# converting string labels into numbers\ntemp_encoded=le.fit_transform(temp)\nlabel=le.fit_transform(play)"
  },
  {
    "objectID": "myblog/posts/Nearest-Neighbour-Classifier/index.html#combining-features",
    "href": "myblog/posts/Nearest-Neighbour-Classifier/index.html#combining-features",
    "title": "Nearest Neighbour Classifier",
    "section": "Combining Features",
    "text": "Combining Features\n\n#combinig weather and temp into single listof tuples\nfeatures=list(zip(weather_encoded,temp_encoded))"
  },
  {
    "objectID": "myblog/posts/Nearest-Neighbour-Classifier/index.html#generating-models",
    "href": "myblog/posts/Nearest-Neighbour-Classifier/index.html#generating-models",
    "title": "Nearest Neighbour Classifier",
    "section": "Generating Models",
    "text": "Generating Models\n\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier(n_neighbors=3)\n\n# Train the model using the training sets\nmodel.fit(features,label)\n\nKNeighborsClassifier(n_neighbors=3)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.KNeighborsClassifierKNeighborsClassifier(n_neighbors=3)"
  },
  {
    "objectID": "myblog/posts/Nearest-Neighbour-Classifier/index.html#predict-output",
    "href": "myblog/posts/Nearest-Neighbour-Classifier/index.html#predict-output",
    "title": "Nearest Neighbour Classifier",
    "section": "Predict Output",
    "text": "Predict Output\n\npredicted= model.predict([[0,2]]) # 0:Overcast, 2:Mild\nprint(predicted)\n\n[1]"
  },
  {
    "objectID": "myblog/posts/best-datascience-books/index.html",
    "href": "myblog/posts/best-datascience-books/index.html",
    "title": "The Best Data Science Books",
    "section": "",
    "text": "I have seen many aspiring data scientists who wants to start their career in the field of data science but they are confused about the path and resources (because there are so many). Every individual has their own way of learning any topic. Some prefer books, some youtube video tutorial for understanding and some wants to learn from university or online certificate courses platform like coursera, Edx udemy etc..\nSo I decided to write this post to those aspirants who are interested in learning data science through books. I have listed the best books for different categories."
  },
  {
    "objectID": "myblog/posts/best-datascience-books/index.html#python",
    "href": "myblog/posts/best-datascience-books/index.html#python",
    "title": "The Best Data Science Books",
    "section": "1. Python",
    "text": "1. Python\n\nFluent Python\n\nPython Data Science Handbook"
  },
  {
    "objectID": "myblog/posts/best-datascience-books/index.html#statistics-and-mathematics",
    "href": "myblog/posts/best-datascience-books/index.html#statistics-and-mathematics",
    "title": "The Best Data Science Books",
    "section": "2. Statistics and Mathematics",
    "text": "2. Statistics and Mathematics\n\nPractical Statistics for Data Scientists\n\nMathematics for Machine Learning"
  },
  {
    "objectID": "myblog/posts/best-datascience-books/index.html#machine-learning",
    "href": "myblog/posts/best-datascience-books/index.html#machine-learning",
    "title": "The Best Data Science Books",
    "section": "3. Machine Learning",
    "text": "3. Machine Learning\n\nMachine Learning with PyTorch and Scikit-Learn"
  },
  {
    "objectID": "myblog/posts/best-datascience-books/index.html#competitive-data-science",
    "href": "myblog/posts/best-datascience-books/index.html#competitive-data-science",
    "title": "The Best Data Science Books",
    "section": "4. Competitive Data Science",
    "text": "4. Competitive Data Science\n\nThe Kaggle Book"
  },
  {
    "objectID": "myblog/posts/best-datascience-books/index.html#productionize-models",
    "href": "myblog/posts/best-datascience-books/index.html#productionize-models",
    "title": "The Best Data Science Books",
    "section": "5. Productionize models",
    "text": "5. Productionize models\n\nDesigning Machine Learning Systems"
  },
  {
    "objectID": "myblog/posts/gradient-descent/index.html",
    "href": "myblog/posts/gradient-descent/index.html",
    "title": "Linear regression using gradient descent",
    "section": "",
    "text": "A simple linear regression equation with one feature is defined as :\n\\[y = b + w * x + \\epsilon\\]\nHere w is coefficient and b is intercept term and \\(\\epsilon\\) is the noise."
  },
  {
    "objectID": "myblog/posts/top-languages/index.html",
    "href": "myblog/posts/top-languages/index.html",
    "title": "Most Popular programming languages 2004-2021",
    "section": "",
    "text": "chart\n\n\n\n\n\n\n\ndata = FileAttachment(\"pypl.csv\").csv({typed: true})\n\nformatNumber = d3.format(\".1%\")\n\n\nformatDate = d3.utcFormat(\"%b %Y\")\n\ntickFormat = \"%\"\n\nk = 2\n\nimport {chart, viewof replay, d3} with {k, data, formatNumber, formatDate, tickFormat} from \"@d3/bar-chart-race\""
  },
  {
    "objectID": "myblog/posts/hypothesis-testing/index.html",
    "href": "myblog/posts/hypothesis-testing/index.html",
    "title": "Hypothesis Testing",
    "section": "",
    "text": "During hypothesis testing we confirm whether results we got is by chance ? If yes then experiment won‚Äôt be repeatable and so has little use.\nTwo ways of doing hypothesis testing are :-\nLet‚Äôs start with business case problem.\nQ :- Suppose that a PM claims that users on average spend about Rs. 50 per month on Amazon. However, you doubt this claim, and you believe that the average should be higher. So you sample 100 users and learn that the sample mean is Rs. 85. Would you reject the PM‚Äôs claim? Assume population standard deviation is 20."
  },
  {
    "objectID": "myblog/posts/hypothesis-testing/index.html#p-value-approach",
    "href": "myblog/posts/hypothesis-testing/index.html#p-value-approach",
    "title": "Hypothesis Testing",
    "section": "P-Value approach",
    "text": "P-Value approach\n\nHypothesis\nSignificance level\nTest Statistics\n\nProbability of observing test statistics\nStatistical Decision\n\n1. Hypothesis\nHo : the average spend per user is Rs. 50\nHa : the average spend per user is greater than Rs. 50\n2. Significance level\n\\(\\alpha = 0.05\\)\n3. Test Statistics\n\\[\nZ-statistics  = \\frac{\\overline{X}-\\mu}{\\sigma/\\sqrt{n}}\n\\]\n\\[\n= \\frac{85-50}{20/\\sqrt{100}} =\\frac{35}{2} = 17.5\n\\]\n4. Probability of observing test statistics\nLooking into standard normal distribution table.\n\\(P-value &lt; 0.0001 &lt; \\alpha = 0.05\\)\n5. Statistical Decision\nAt alpha = 0.05 there is statistical significance to reject PM‚Äôs claim and conclude that the average spend per user is greater than Rs. 50.\nBusiness Case problem\nQ :- A Principal claims that the student in his school are above average intelligence. A random sample of 30 IQ scores have a mean of 112.5. Is there sufficient evidence to support the principal‚Äôs claim? The mean population IQ is 100 with standard deviation is 15."
  },
  {
    "objectID": "myblog/posts/hypothesis-testing/index.html#critical-value-approach",
    "href": "myblog/posts/hypothesis-testing/index.html#critical-value-approach",
    "title": "Hypothesis Testing",
    "section": "Critical Value Approach",
    "text": "Critical Value Approach\n\nHypothesis\nSignificance level\nTest Statistics\n\nCritical Value\nStatistical Decision\n\n\n\n\n\n\n1. Hypothesis\nHo : the average IQ score is 100\nHa : the average IQ score is greater than Rs. 100\n2. Significance level\n\\(\\alpha = 0.05\\)\n3. Test Statistics\n\\[\nZ-statistics  = \\frac{\\overline{X}-\\mu}{\\sigma/\\sqrt{n}}\n\\]\n\\[\n= \\frac{112.5-100}{15/\\sqrt{30}} = 4.56\n\\]\n4. Z Critical Value\nLooking into standard normal distribution table.\n\\(Z Critical-value = 1.645\\)\n5. Statistical Decision\nAt alpha = 0.05 test statistics is greater than Z Critical value hence we can reject null hypothesis."
  },
  {
    "objectID": "myblog/blog.html",
    "href": "myblog/blog.html",
    "title": "Blog",
    "section": "",
    "text": "Introduction to Diffusion based Models\n\n\n\n\n\nIn this post I will try to make you understand diffusion models.\n\n\n\n\n\n\nSep 11, 2023\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\nThe Best Data Science Books\n\n\n\n\n\nListing the best books available in the market right now for data science.\n\n\n\n\n\n\nJan 16, 2023\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\nSuccessful delivering of Machine Learning Projects\n\n\n\n\n\nPrinciples and process for democratizing ML projects\n\n\n\n\n\n\nSep 7, 2022\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\nHypothesis Testing\n\n\n\n\n\nA hypothesis testing is a way to test an assumption about a population parameter.\n\n\n\n\n\n\nApr 4, 2022\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\nMost Popular programming languages 2004-2021\n\n\n\n\n\nUsing animation lets see how different programmming language rise in last couple of decades.\n\n\n\n\n\n\nFeb 10, 2022\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\nLinear regression using gradient descent\n\n\n\n\n\nIn this post we will implement gradient descent algorithm from scratch using numpy for linear regression.\n\n\n\n\n\n\nDec 10, 2021\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\nFbeta-Measure\n\n\n\n\n\nA generalization of the F-measure that adds a configuration parameter called beta\n\n\n\n\n\n\nMar 12, 2021\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\nNearest Neighbour Classifier\n\n\n\n\n\nNearest neighbor classifiers are defined by their characteristic of classifying unlabeled examples by assigning them the class of similar labeled examples.\n\n\n\n\n\n\nMar 6, 2020\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "myblog/posts/gradient-descent/index.html#gradient-descent-algorithm",
    "href": "myblog/posts/gradient-descent/index.html#gradient-descent-algorithm",
    "title": "Solving linear regression problem using gradient descent",
    "section": "Gradient Descent Algorithm",
    "text": "Gradient Descent Algorithm\nStep 1 - Compute the loss\nStep 2 - Compute the gradient\nStep 3 - Update the parameters\nStep 4 - Repeat Step 1 to 3\n\nStep 1 :- Compute the loss\nFor regression problem loss is given by mean squared error (MSE).\n\\[ MSE  = \\frac{1}{N} \\sum\\limits_{i=1}^{N} (y-\\hat{y_i})^2 \\]\n\\[ MSE  = \\frac{1}{N} \\sum\\limits_{i=1}^{N} (y-b-wx_i)^2 \\]\n\n\nStep 2 :- Compute the gradient\nGradient is just partial derivative. It also tell the direction of steepest ascent.Now we have two parameters so we will calculate two partial derivatives.\n\n\n\n\n\n\nNote\n\n\n\nA derivative tells us how much a given quantity changes when we change slightly some other quantity.\n\n\nIn our case we are interested how much our MSE loss change when we vary one of our two parameters.\n\\[ \\frac{\\partial MSE}{\\partial w} = \\frac{\\partial MSE}{\\partial \\hat{y}}.\\frac{\\partial \\hat{y}}{\\partial w} = \\frac{1}{N} \\sum\\limits_{i=1}^{N} 2(y-b-wx_i).(-x_i) = -2\\frac{1}{N} \\sum\\limits_{i=1}^{N}(x_i)(y-\\hat{y_i}) \\]\n\\[ \\frac{\\partial MSE}{\\partial b} = \\frac{\\partial MSE}{\\partial \\hat{y}}.\\frac{\\partial \\hat{y}}{\\partial b} = \\frac{1}{N} \\sum\\limits_{i=1}^{N} 2(y-b-wx_i).(-1) = -2\\frac{1}{N} \\sum\\limits_{i=1}^{N}(y-\\hat{y_i}) \\]\n\n\nStep 3 :- Update the Parameters\nNow we will update the parameters by using gradients to minimize the loss. But gradient tells the direction of steepest ascent so we will multiply by -1.\n\\[ w  = w - \\eta\\frac{\\partial MSE}{\\partial w} \\]\n\\[ b  = b - \\eta\\frac{\\partial MSE}{\\partial b} \\]\n\n\nStep 4:- Repeat\nNow we will use updated parameters and start with step 1 again. We will repeat this process for multiple epochs. This is also known as training the model.\n\nAn epoch is completed when all the data points has been used for calculating the loss."
  },
  {
    "objectID": "myblog/posts/gradient-descent/index.html#implementing-linear-regression-using-numpy",
    "href": "myblog/posts/gradient-descent/index.html#implementing-linear-regression-using-numpy",
    "title": "Solving linear regression problem using gradient descent",
    "section": "Implementing Linear Regression using Numpy",
    "text": "Implementing Linear Regression using Numpy\nNow its time to implement our linear regression model using gradient descent using numpy.\n\nGenerate Synthetic data\nUsing the above equation we will generate some synthetic data with w = 2 and b = 1 and some random noise.\n\nnp.random.seed(42)\nimport numpy as np\nx = np.random.randn(100,1)\ny = 1 + 2*x + np.random.randn(100,1)\n\nOur goal will be to accurately predict the value of w (i.e.¬†2) and b (i.e.¬†1).\n\n\nInitialize parameters (w and b) and hyperparameter (learning_rate)\nSo we will initialize the learnable parameters w and b with some random values and try to find right value by minimizing the loss function. The value of the hyperparameter i.e.¬†learning rate is fixed.\n\nw = np.random.randn(1)\nb = np.random.randn(1)\nlearning_rate = 0.001\n\n\n\nGradient Descent algorithm\n\nCompute the loss\n\nCompute the gradients\n\nUpdate the parameters\n\nRepeat\n\n\ndef gradient_descent(x,y,w,b,learning_rate):\n    dldw = 0.0 \n    dldb = 0.0\n    N = x.shape[0]\n    \n    for xi, yi in zip(x,y):\n        dldw += -2*xi*(yi-(w*xi+b))\n        dldb += -2*(yi-(w*xi+b))\n    #make an update to the parameters\n    w = w - learning_rate*(1/N)*dldw\n    b = b - learning_rate*(1/N)*dldb\n    \n    return w,b\n\n\n\nIterate gradient descent function and update parameters to minimize loss.\n\nfor epoch in range(300):\n    w, b = gradient_descent(x,y,w,b,learning_rate) \n    yhat =  w*x + b\n    loss =  np.divide(np.sum((y-yhat)**2, axis=0), x.shape[0])\n    print(f'{epoch} loss is {loss}, parameters w:{w}, b:{b}')\n\n0 loss is [3.31211004], parameters w:[0.03394664], b:[-0.00241723]\n1 loss is [3.2011369], parameters w:[0.06731399], b:[-0.00483577]\n2 loss is [3.09389844], parameters w:[0.100112], b:[-0.00725474]\n3 loss is [2.99026833], parameters w:[0.13235046], b:[-0.0096733]\n4 loss is [2.8901245], parameters w:[0.16403896], b:[-0.01209065]\n5 loss is [2.79334907], parameters w:[0.19518695], b:[-0.01450599]\n6 loss is [2.69982816], parameters w:[0.2258037], b:[-0.01691859]\n7 loss is [2.60945176], parameters w:[0.25589833], b:[-0.01932772]\n8 loss is [2.52211359], parameters w:[0.2854798], b:[-0.02173268]\n9 loss is [2.43771102], parameters w:[0.31455692], b:[-0.02413281]\n10 loss is [2.35614487], parameters w:[0.34313833], b:[-0.02652747]\n11 loss is [2.27731934], parameters w:[0.37123253], b:[-0.02891603]\n12 loss is [2.20114189], parameters w:[0.39884789], b:[-0.03129792]\n13 loss is [2.12752313], parameters w:[0.42599262], b:[-0.03367256]\n14 loss is [2.05637669], parameters w:[0.45267477], b:[-0.03603941]\n15 loss is [1.98761913], parameters w:[0.4789023], b:[-0.03839795]\n16 loss is [1.92116987], parameters w:[0.50468298], b:[-0.04074769]\n17 loss is [1.85695103], parameters w:[0.53002448], b:[-0.04308813]\n18 loss is [1.79488739], parameters w:[0.55493432], b:[-0.04541883]\n19 loss is [1.73490628], parameters w:[0.5794199], b:[-0.04773935]\n20 loss is [1.67693749], parameters w:[0.60348849], b:[-0.05004928]\n21 loss is [1.6209132], parameters w:[0.62714724], b:[-0.0523482]\n22 loss is [1.56676786], parameters w:[0.65040315], b:[-0.05463576]\n23 loss is [1.51443818], parameters w:[0.67326314], b:[-0.05691158]\n24 loss is [1.463863], parameters w:[0.69573398], b:[-0.05917532]\n25 loss is [1.41498321], parameters w:[0.71782234], b:[-0.06142665]\n26 loss is [1.36774173], parameters w:[0.73953477], b:[-0.06366526]\n27 loss is [1.32208339], parameters w:[0.76087769], b:[-0.06589085]\n28 loss is [1.27795492], parameters w:[0.78185744], b:[-0.06810315]\n29 loss is [1.23530481], parameters w:[0.80248024], b:[-0.07030189]\n30 loss is [1.19408333], parameters w:[0.82275218], b:[-0.07248682]\n31 loss is [1.1542424], parameters w:[0.84267927], b:[-0.0746577]\n32 loss is [1.11573559], parameters w:[0.86226742], b:[-0.07681431]\n33 loss is [1.07851804], parameters w:[0.88152242], b:[-0.07895644]\n34 loss is [1.04254639], parameters w:[0.90044997], b:[-0.08108389]\n35 loss is [1.00777875], parameters w:[0.91905568], b:[-0.08319647]\n36 loss is [0.97417466], parameters w:[0.93734503], b:[-0.08529402]\n37 loss is [0.94169501], parameters w:[0.95532345], b:[-0.08737636]\n38 loss is [0.91030202], parameters w:[0.97299626], b:[-0.08944336]\n39 loss is [0.87995918], parameters w:[0.99036866], b:[-0.09149486]\n40 loss is [0.85063121], parameters w:[1.00744581], b:[-0.09353074]\n41 loss is [0.82228404], parameters w:[1.02423274], b:[-0.09555088]\n42 loss is [0.79488472], parameters w:[1.04073441], b:[-0.09755518]\n43 loss is [0.76840144], parameters w:[1.05695571], b:[-0.09954352]\n44 loss is [0.74280345], parameters w:[1.07290142], b:[-0.10151582]\n45 loss is [0.71806103], parameters w:[1.08857624], b:[-0.103472]\n46 loss is [0.69414548], parameters w:[1.10398481], b:[-0.10541198]\n47 loss is [0.67102905], parameters w:[1.11913167], b:[-0.1073357]\n48 loss is [0.64868494], parameters w:[1.1340213], b:[-0.1092431]\n49 loss is [0.62708725], parameters w:[1.14865808], b:[-0.11113413]\n50 loss is [0.60621094], parameters w:[1.16304633], b:[-0.11300875]\n51 loss is [0.58603182], parameters w:[1.17719029], b:[-0.11486691]\n52 loss is [0.56652652], parameters w:[1.19109414], b:[-0.11670861]\n53 loss is [0.54767247], parameters w:[1.20476198], b:[-0.1185338]\n54 loss is [0.52944783], parameters w:[1.21819782], b:[-0.12034249]\n55 loss is [0.5118315], parameters w:[1.23140564], b:[-0.12213465]\n56 loss is [0.49480313], parameters w:[1.24438931], b:[-0.12391028]\n57 loss is [0.47834299], parameters w:[1.25715267], b:[-0.1256694]\n58 loss is [0.46243208], parameters w:[1.26969948], b:[-0.127412]\n59 loss is [0.44705198], parameters w:[1.28203342], b:[-0.1291381]\n60 loss is [0.43218494], parameters w:[1.29415812], b:[-0.13084771]\n61 loss is [0.41781377], parameters w:[1.30607717], b:[-0.13254087]\n62 loss is [0.40392188], parameters w:[1.31779405], b:[-0.1342176]\n63 loss is [0.39049322], parameters w:[1.32931223], b:[-0.13587793]\n64 loss is [0.3775123], parameters w:[1.34063508], b:[-0.13752191]\n65 loss is [0.36496413], parameters w:[1.35176593], b:[-0.13914956]\n66 loss is [0.35283424], parameters w:[1.36270807], b:[-0.14076094]\n67 loss is [0.34110864], parameters w:[1.3734647], b:[-0.1423561]\n68 loss is [0.3297738], parameters w:[1.38403899], b:[-0.14393509]\n69 loss is [0.31881666], parameters w:[1.39443404], b:[-0.14549796]\n70 loss is [0.3082246], parameters w:[1.4046529], b:[-0.14704478]\n71 loss is [0.2979854], parameters w:[1.41469859], b:[-0.14857561]\n72 loss is [0.28808727], parameters w:[1.42457404], b:[-0.15009052]\n73 loss is [0.27851882], parameters w:[1.43428216], b:[-0.15158957]\n74 loss is [0.26926903], parameters w:[1.4438258], b:[-0.15307285]\n75 loss is [0.26032724], parameters w:[1.45320775], b:[-0.15454041]\n76 loss is [0.25168318], parameters w:[1.46243078], b:[-0.15599235]\n77 loss is [0.2433269], parameters w:[1.47149758], b:[-0.15742874]\n78 loss is [0.23524878], parameters w:[1.48041082], b:[-0.15884966]\n79 loss is [0.22743954], parameters w:[1.48917311], b:[-0.1602552]\n80 loss is [0.2198902], parameters w:[1.49778701], b:[-0.16164544]\n81 loss is [0.21259208], parameters w:[1.50625506], b:[-0.16302048]\n82 loss is [0.2055368], parameters w:[1.51457974], b:[-0.16438041]\n83 loss is [0.19871625], parameters w:[1.52276348], b:[-0.16572531]\n84 loss is [0.1921226], parameters w:[1.53080869], b:[-0.16705528]\n85 loss is [0.18574828], parameters w:[1.53871771], b:[-0.16837042]\n86 loss is [0.17958597], parameters w:[1.54649288], b:[-0.16967083]\n87 loss is [0.17362859], parameters w:[1.55413645], b:[-0.1709566]\n88 loss is [0.16786932], parameters w:[1.56165068], b:[-0.17222784]\n89 loss is [0.16230154], parameters w:[1.56903775], b:[-0.17348464]\n90 loss is [0.15691888], parameters w:[1.57629984], b:[-0.17472711]\n91 loss is [0.15171514], parameters w:[1.58343906], b:[-0.17595535]\n92 loss is [0.14668439], parameters w:[1.59045751], b:[-0.17716947]\n93 loss is [0.14182083], parameters w:[1.59735724], b:[-0.17836957]\n94 loss is [0.13711891], parameters w:[1.60414026], b:[-0.17955576]\n95 loss is [0.13257324], parameters w:[1.61080857], b:[-0.18072815]\n96 loss is [0.1281786], parameters w:[1.6173641], b:[-0.18188684]\n97 loss is [0.12392998], parameters w:[1.62380878], b:[-0.18303195]\n98 loss is [0.11982249], parameters w:[1.63014448], b:[-0.18416359]\n99 loss is [0.11585145], parameters w:[1.63637307], b:[-0.18528185]\n100 loss is [0.1120123], parameters w:[1.64249635], b:[-0.18638687]\n101 loss is [0.10830065], parameters w:[1.64851612], b:[-0.18747873]\n102 loss is [0.10471227], parameters w:[1.65443414], b:[-0.18855757]\n103 loss is [0.10124303], parameters w:[1.66025213], b:[-0.18962348]\n104 loss is [0.09788899], parameters w:[1.66597179], b:[-0.19067659]\n105 loss is [0.09464629], parameters w:[1.6715948], b:[-0.191717]\n106 loss is [0.09151125], parameters w:[1.67712278], b:[-0.19274483]\n107 loss is [0.08848026], parameters w:[1.68255737], b:[-0.19376018]\n108 loss is [0.08554988], parameters w:[1.68790013], b:[-0.19476318]\n109 loss is [0.08271675], parameters w:[1.69315263], b:[-0.19575393]\n110 loss is [0.07997763], parameters w:[1.6983164], b:[-0.19673255]\n111 loss is [0.07732941], parameters w:[1.70339295], b:[-0.19769914]\n112 loss is [0.07476905], parameters w:[1.70838375], b:[-0.19865384]\n113 loss is [0.07229363], parameters w:[1.71329027], b:[-0.19959673]\n114 loss is [0.06990033], parameters w:[1.71811392], b:[-0.20052795]\n115 loss is [0.06758642], parameters w:[1.72285612], b:[-0.2014476]\n116 loss is [0.06534926], parameters w:[1.72751825], b:[-0.20235579]\n117 loss is [0.06318629], parameters w:[1.73210167], b:[-0.20325263]\n118 loss is [0.06109506], parameters w:[1.7366077], b:[-0.20413825]\n119 loss is [0.05907317], parameters w:[1.74103767], b:[-0.20501274]\n120 loss is [0.05711831], parameters w:[1.74539286], b:[-0.20587622]\n121 loss is [0.05522828], parameters w:[1.74967455], b:[-0.2067288]\n122 loss is [0.0534009], parameters w:[1.75388396], b:[-0.20757059]\n123 loss is [0.05163409], parameters w:[1.75802234], b:[-0.20840171]\n124 loss is [0.04992585], parameters w:[1.76209089], b:[-0.20922225]\n125 loss is [0.04827423], parameters w:[1.76609078], b:[-0.21003233]\n126 loss is [0.04667735], parameters w:[1.77002318], b:[-0.21083207]\n127 loss is [0.04513339], parameters w:[1.77388924], b:[-0.21162155]\n128 loss is [0.04364058], parameters w:[1.77769008], b:[-0.21240091]\n129 loss is [0.04219724], parameters w:[1.78142681], b:[-0.21317024]\n130 loss is [0.04080172], parameters w:[1.7851005], b:[-0.21392964]\n131 loss is [0.03945244], parameters w:[1.78871223], b:[-0.21467923]\n132 loss is [0.03814785], parameters w:[1.79226305], b:[-0.21541911]\n133 loss is [0.03688647], parameters w:[1.79575399], b:[-0.21614939]\n134 loss is [0.03566688], parameters w:[1.79918607], b:[-0.21687017]\n135 loss is [0.03448768], parameters w:[1.80256027], b:[-0.21758155]\n136 loss is [0.03334753], parameters w:[1.80587759], b:[-0.21828364]\n137 loss is [0.03224513], parameters w:[1.80913897], b:[-0.21897654]\n138 loss is [0.03117924], parameters w:[1.81234538], b:[-0.21966035]\n139 loss is [0.03014864], parameters w:[1.81549773], b:[-0.22033518]\n140 loss is [0.02915216], parameters w:[1.81859696], b:[-0.22100112]\n141 loss is [0.02818867], parameters w:[1.82164394], b:[-0.22165827]\n142 loss is [0.02725708], parameters w:[1.82463958], b:[-0.22230674]\n143 loss is [0.02635632], parameters w:[1.82758473], b:[-0.22294662]\n144 loss is [0.02548538], parameters w:[1.83048025], b:[-0.22357801]\n145 loss is [0.02464326], parameters w:[1.83332699], b:[-0.22420101]\n146 loss is [0.02382901], parameters w:[1.83612576], b:[-0.22481571]\n147 loss is [0.02304171], parameters w:[1.83887738], b:[-0.22542221]\n148 loss is [0.02228046], parameters w:[1.84158265], b:[-0.2260206]\n149 loss is [0.0215444], parameters w:[1.84424234], b:[-0.22661099]\n150 loss is [0.02083269], parameters w:[1.84685723], b:[-0.22719345]\n151 loss is [0.02014453], parameters w:[1.84942809], b:[-0.2277681]\n152 loss is [0.01947913], parameters w:[1.85195564], b:[-0.22833501]\n153 loss is [0.01883575], parameters w:[1.85444063], b:[-0.22889427]\n154 loss is [0.01821365], parameters w:[1.85688377], b:[-0.22944599]\n155 loss is [0.01761212], parameters w:[1.85928578], b:[-0.22999025]\n156 loss is [0.01703049], parameters w:[1.86164734], b:[-0.23052713]\n157 loss is [0.01646809], parameters w:[1.86396914], b:[-0.23105673]\n158 loss is [0.0159243], parameters w:[1.86625186], b:[-0.23157914]\n159 loss is [0.01539848], parameters w:[1.86849614], b:[-0.23209443]\n160 loss is [0.01489005], parameters w:[1.87070265], b:[-0.23260271]\n161 loss is [0.01439843], parameters w:[1.87287202], b:[-0.23310404]\n162 loss is [0.01392307], parameters w:[1.87500488], b:[-0.23359852]\n163 loss is [0.01346342], parameters w:[1.87710184], b:[-0.23408623]\n164 loss is [0.01301897], parameters w:[1.87916352], b:[-0.23456725]\n165 loss is [0.01258921], parameters w:[1.8811905], b:[-0.23504167]\n166 loss is [0.01217365], parameters w:[1.88318337], b:[-0.23550957]\n167 loss is [0.01177183], parameters w:[1.88514272], b:[-0.23597102]\n168 loss is [0.01138329], parameters w:[1.8870691], b:[-0.23642611]\n169 loss is [0.01100759], parameters w:[1.88896307], b:[-0.23687491]\n170 loss is [0.01064431], parameters w:[1.89082518], b:[-0.23731751]\n171 loss is [0.01029303], parameters w:[1.89265597], b:[-0.23775398]\n172 loss is [0.00995336], parameters w:[1.89445596], b:[-0.2381844]\n173 loss is [0.00962491], parameters w:[1.89622568], b:[-0.23860884]\n174 loss is [0.00930732], parameters w:[1.89796564], b:[-0.23902738]\n175 loss is [0.00900021], parameters w:[1.89967634], b:[-0.2394401]\n176 loss is [0.00870326], parameters w:[1.90135827], b:[-0.23984706]\n177 loss is [0.00841611], parameters w:[1.90301192], b:[-0.24024835]\n178 loss is [0.00813845], parameters w:[1.90463777], b:[-0.24064403]\n179 loss is [0.00786996], parameters w:[1.90623628], b:[-0.24103417]\n180 loss is [0.00761034], parameters w:[1.90780791], b:[-0.24141885]\n181 loss is [0.00735929], parameters w:[1.90935313], b:[-0.24179813]\n182 loss is [0.00711653], parameters w:[1.91087237], b:[-0.24217209]\n183 loss is [0.00688179], parameters w:[1.91236608], b:[-0.24254079]\n184 loss is [0.00665481], parameters w:[1.91383468], b:[-0.2429043]\n185 loss is [0.00643531], parameters w:[1.9152786], b:[-0.24326269]\n186 loss is [0.00622307], parameters w:[1.91669825], b:[-0.24361602]\n187 loss is [0.00601783], parameters w:[1.91809404], b:[-0.24396436]\n188 loss is [0.00581937], parameters w:[1.91946638], b:[-0.24430778]\n189 loss is [0.00562747], parameters w:[1.92081566], b:[-0.24464633]\n190 loss is [0.0054419], parameters w:[1.92214228], b:[-0.24498009]\n191 loss is [0.00526245], parameters w:[1.9234466], b:[-0.24530912]\n192 loss is [0.00508893], parameters w:[1.92472901], b:[-0.24563347]\n193 loss is [0.00492113], parameters w:[1.92598988], b:[-0.24595321]\n194 loss is [0.00475888], parameters w:[1.92722957], b:[-0.2462684]\n195 loss is [0.00460198], parameters w:[1.92844843], b:[-0.2465791]\n196 loss is [0.00445026], parameters w:[1.92964683], b:[-0.24688536]\n197 loss is [0.00430354], parameters w:[1.93082509], b:[-0.24718726]\n198 loss is [0.00416167], parameters w:[1.93198357], b:[-0.24748484]\n199 loss is [0.00402448], parameters w:[1.9331226], b:[-0.24777816]\n200 loss is [0.00389181], parameters w:[1.9342425], b:[-0.24806728]\n201 loss is [0.00376353], parameters w:[1.93534359], b:[-0.24835226]\n202 loss is [0.00363948], parameters w:[1.9364262], b:[-0.24863315]\n203 loss is [0.00351952], parameters w:[1.93749063], b:[-0.24891001]\n204 loss is [0.00340351], parameters w:[1.93853719], b:[-0.24918288]\n205 loss is [0.00329134], parameters w:[1.93956618], b:[-0.24945183]\n206 loss is [0.00318286], parameters w:[1.9405779], b:[-0.2497169]\n207 loss is [0.00307797], parameters w:[1.94157264], b:[-0.24997815]\n208 loss is [0.00297653], parameters w:[1.94255068], b:[-0.25023564]\n209 loss is [0.00287844], parameters w:[1.9435123], b:[-0.2504894]\n210 loss is [0.00278359], parameters w:[1.94445779], b:[-0.25073949]\n211 loss is [0.00269186], parameters w:[1.94538741], b:[-0.25098597]\n212 loss is [0.00260316], parameters w:[1.94630143], b:[-0.25122888]\n213 loss is [0.00251739], parameters w:[1.94720011], b:[-0.25146826]\n214 loss is [0.00243444], parameters w:[1.94808371], b:[-0.25170417]\n215 loss is [0.00235423], parameters w:[1.94895249], b:[-0.25193666]\n216 loss is [0.00227667], parameters w:[1.9498067], b:[-0.25216576]\n217 loss is [0.00220166], parameters w:[1.95064657], b:[-0.25239154]\n218 loss is [0.00212913], parameters w:[1.95147235], b:[-0.25261402]\n219 loss is [0.00205899], parameters w:[1.95228428], b:[-0.25283327]\n220 loss is [0.00199116], parameters w:[1.95308259], b:[-0.25304931]\n221 loss is [0.00192556], parameters w:[1.95386751], b:[-0.25326221]\n222 loss is [0.00186213], parameters w:[1.95463927], b:[-0.25347199]\n223 loss is [0.0018008], parameters w:[1.95539809], b:[-0.25367871]\n224 loss is [0.00174148], parameters w:[1.95614417], b:[-0.2538824]\n225 loss is [0.00168412], parameters w:[1.95687775], b:[-0.25408311]\n226 loss is [0.00162865], parameters w:[1.95759903], b:[-0.25428088]\n227 loss is [0.00157501], parameters w:[1.95830821], b:[-0.25447575]\n228 loss is [0.00152313], parameters w:[1.9590055], b:[-0.25466776]\n229 loss is [0.00147297], parameters w:[1.9596911], b:[-0.25485694]\n230 loss is [0.00142446], parameters w:[1.96036521], b:[-0.25504335]\n231 loss is [0.00137755], parameters w:[1.96102801], b:[-0.25522702]\n232 loss is [0.00133218], parameters w:[1.96167971], b:[-0.25540798]\n233 loss is [0.00128831], parameters w:[1.96232048], b:[-0.25558627]\n234 loss is [0.00124589], parameters w:[1.96295051], b:[-0.25576194]\n235 loss is [0.00120486], parameters w:[1.96356998], b:[-0.25593501]\n236 loss is [0.00116519], parameters w:[1.96417907], b:[-0.25610553]\n237 loss is [0.00112682], parameters w:[1.96477795], b:[-0.25627353]\n238 loss is [0.00108972], parameters w:[1.96536679], b:[-0.25643905]\n239 loss is [0.00105384], parameters w:[1.96594577], b:[-0.25660211]\n240 loss is [0.00101914], parameters w:[1.96651504], b:[-0.25676277]\n241 loss is [0.00098559], parameters w:[1.96707478], b:[-0.25692104]\n242 loss is [0.00095314], parameters w:[1.96762513], b:[-0.25707696]\n243 loss is [0.00092176], parameters w:[1.96816627], b:[-0.25723057]\n244 loss is [0.00089141], parameters w:[1.96869834], b:[-0.2573819]\n245 loss is [0.00086207], parameters w:[1.9692215], b:[-0.25753099]\n246 loss is [0.00083369], parameters w:[1.96973589], b:[-0.25767785]\n247 loss is [0.00080624], parameters w:[1.97024167], b:[-0.25782253]\n248 loss is [0.0007797], parameters w:[1.97073897], b:[-0.25796506]\n249 loss is [0.00075404], parameters w:[1.97122795], b:[-0.25810546]\n250 loss is [0.00072921], parameters w:[1.97170873], b:[-0.25824377]\n251 loss is [0.00070521], parameters w:[1.97218147], b:[-0.25838002]\n252 loss is [0.000682], parameters w:[1.97264628], b:[-0.25851424]\n253 loss is [0.00065955], parameters w:[1.97310331], b:[-0.25864645]\n254 loss is [0.00063784], parameters w:[1.97355269], b:[-0.25877668]\n255 loss is [0.00061685], parameters w:[1.97399455], b:[-0.25890497]\n256 loss is [0.00059655], parameters w:[1.974429], b:[-0.25903134]\n257 loss is [0.00057691], parameters w:[1.97485619], b:[-0.25915581]\n258 loss is [0.00055793], parameters w:[1.97527621], b:[-0.25927842]\n259 loss is [0.00053957], parameters w:[1.97568921], b:[-0.25939919]\n260 loss is [0.00052181], parameters w:[1.9760953], b:[-0.25951816]\n261 loss is [0.00050464], parameters w:[1.97649458], b:[-0.25963533]\n262 loss is [0.00048803], parameters w:[1.97688718], b:[-0.25975075]\n263 loss is [0.00047197], parameters w:[1.97727321], b:[-0.25986443]\n264 loss is [0.00045644], parameters w:[1.97765278], b:[-0.2599764]\n265 loss is [0.00044142], parameters w:[1.978026], b:[-0.26008669]\n266 loss is [0.00042689], parameters w:[1.97839297], b:[-0.26019532]\n267 loss is [0.00041285], parameters w:[1.9787538], b:[-0.26030232]\n268 loss is [0.00039926], parameters w:[1.97910859], b:[-0.2604077]\n269 loss is [0.00038613], parameters w:[1.97945744], b:[-0.26051149]\n270 loss is [0.00037342], parameters w:[1.97980045], b:[-0.26061372]\n271 loss is [0.00036113], parameters w:[1.98013773], b:[-0.2607144]\n272 loss is [0.00034925], parameters w:[1.98046936], b:[-0.26081357]\n273 loss is [0.00033776], parameters w:[1.98079545], b:[-0.26091123]\n274 loss is [0.00032665], parameters w:[1.98111607], b:[-0.26100742]\n275 loss is [0.0003159], parameters w:[1.98143134], b:[-0.26110216]\n276 loss is [0.00030551], parameters w:[1.98174133], b:[-0.26119546]\n277 loss is [0.00029546], parameters w:[1.98204613], b:[-0.26128734]\n278 loss is [0.00028574], parameters w:[1.98234584], b:[-0.26137784]\n279 loss is [0.00027634], parameters w:[1.98264053], b:[-0.26146697]\n280 loss is [0.00026725], parameters w:[1.98293029], b:[-0.26155474]\n281 loss is [0.00025846], parameters w:[1.98321521], b:[-0.26164118]\n282 loss is [0.00024995], parameters w:[1.98349536], b:[-0.26172631]\n283 loss is [0.00024173], parameters w:[1.98377083], b:[-0.26181015]\n284 loss is [0.00023378], parameters w:[1.98404169], b:[-0.26189271]\n285 loss is [0.00022609], parameters w:[1.98430802], b:[-0.26197402]\n286 loss is [0.00021865], parameters w:[1.98456989], b:[-0.26205409]\n287 loss is [0.00021146], parameters w:[1.98482739], b:[-0.26213294]\n288 loss is [0.00020451], parameters w:[1.98508058], b:[-0.26221059]\n289 loss is [0.00019778], parameters w:[1.98532954], b:[-0.26228706]\n290 loss is [0.00019127], parameters w:[1.98557434], b:[-0.26236237]\n291 loss is [0.00018498], parameters w:[1.98581504], b:[-0.26243652]\n292 loss is [0.0001789], parameters w:[1.98605172], b:[-0.26250955]\n293 loss is [0.00017302], parameters w:[1.98628444], b:[-0.26258146]\n294 loss is [0.00016733], parameters w:[1.98651327], b:[-0.26265227]\n295 loss is [0.00016182], parameters w:[1.98673828], b:[-0.26272201]\n296 loss is [0.0001565], parameters w:[1.98695953], b:[-0.26279067]\n297 loss is [0.00015135], parameters w:[1.98717707], b:[-0.26285829]\n298 loss is [0.00014638], parameters w:[1.98739098], b:[-0.26292487]\n299 loss is [0.00014156], parameters w:[1.98760132], b:[-0.26299043]"
  },
  {
    "objectID": "myblog/posts/gradient-descent/index.html#gradient-descent",
    "href": "myblog/posts/gradient-descent/index.html#gradient-descent",
    "title": "Linear regression using gradient descent",
    "section": "Gradient Descent",
    "text": "Gradient Descent\nGradient descent is an optimization algorithm used to minimize some function by iteratively moving in the direction of steepest descent as defined by the negative of the gradient. In machine learning, we use gradient descent to update the parameters of our model. Parameters refer to coefficients in Linear Regression and weights in neural networks.\nSteps to implement gradient descent\nStep 1 - Compute the loss\nStep 2 - Compute the gradient\nStep 3 - Update the parameters\nStep 4 - Repeat Step 1 to 3\n\nStep 1 :- Compute the loss\nFor regression problem loss is given by mean squared error (MSE).\n\\[ MSE  = \\frac{1}{N} \\sum\\limits_{i=1}^{N} (y-\\hat{y_i})^2 \\]\n\\[ MSE  = \\frac{1}{N} \\sum\\limits_{i=1}^{N} (y-b-wx_i)^2 \\]\n\n\nStep 2 :- Compute the gradient\nGradient is a vector with function‚Äôs partial derivatives for components.\n\\[ \\Delta (MSE)  = [\\frac{\\partial MSE}{\\partial w}, \\frac{\\partial MSE}{\\partial b}] \\]\nIt also tell the direction of steepest ascent which means in which direction one should step to increase the function most quickly.\n\n\n\n\n\n\nNote\n\n\n\nA derivative tells us how much a given quantity changes when we change slightly some other quantity.\n\n\nIn our case we are interested how much our MSE loss change when we vary one of our two parameters.\n\\[ \\frac{\\partial MSE}{\\partial w} = \\frac{\\partial MSE}{\\partial \\hat{y}}.\\frac{\\partial \\hat{y}}{\\partial w} = \\frac{1}{N} \\sum\\limits_{i=1}^{N} 2(y-b-wx_i).(-x_i) = -2\\frac{1}{N} \\sum\\limits_{i=1}^{N}(x_i)(y-\\hat{y_i}) \\]\n\\[ \\frac{\\partial MSE}{\\partial b} = \\frac{\\partial MSE}{\\partial \\hat{y}}.\\frac{\\partial \\hat{y}}{\\partial b} = \\frac{1}{N} \\sum\\limits_{i=1}^{N} 2(y-b-wx_i).(-1) = -2\\frac{1}{N} \\sum\\limits_{i=1}^{N}(y-\\hat{y_i}) \\]\n\n\nStep 3 :- Update the Parameters\nNow we will update the parameters by using gradients to minimize the loss. But gradient tells the direction of steepest ascent so we will multiply by -1.\n\\[ w  = w - \\eta\\frac{\\partial MSE}{\\partial w} \\]\n\\[ b  = b - \\eta\\frac{\\partial MSE}{\\partial b} \\]\n\n\nStep 4:- Repeat\nNow we will use updated parameters and start with step 1 again. We will repeat this process for multiple epochs. This is also known as training the model.\n\n\nAn epoch is completed when all the data points has been used for calculating the loss.\n\nClick below to add some new points and see how algorithm adjust the slope of line over time to meet best fit.\n\np5(sketch =&gt; {\n  let system;\n  \n  //set up some default points\n  \n  /*    \n  */\n  \n  let data = [\n    sketch.createVector(.105, .423333),\n    sketch.createVector(.58, .526666),\n    sketch.createVector(.75, .82666),\n    sketch.createVector(.3475, .183333),\n    sketch.createVector(.3195, .543353),\n  ];\n  \n  let m = 1;\n  let b = 0;\n  \n  sketch.setup = function() {\n    sketch.createCanvas(800, 350);\n    sketch.background(51);\n  };\n  \n  const gradientDescent = () =&gt; {\n    var learning_rate = 0.05;\n    \n    for(var i = 0; i &lt; data.length; i++) {\n      var x = data[i].x;\n      var y = data[i].y;\n      \n      var guess = m * x + b;\n      var error = y - guess;\n      \n      m = m + (error * x) * learning_rate;\n      b = b + (error) * learning_rate;\n    }\n  }\n  \n  const drawLine = () =&gt; {\n    var x1 = 0;\n    var y1 = m * x1 + b;\n    var x2 = 1;\n    var y2 = m * x2 + b;\n    \n    x1 = sketch.map(x1, 0, 1, 0, sketch.width);\n    y1 = sketch.map(y1, 0, 1, sketch.height, 0);\n    x2 = sketch.map(x2, 0, 1, 0, sketch.width);\n    y2 = sketch.map(y2, 0, 1, sketch.height, 0);\n    \n    sketch.stroke(101, 74, 78);\n    sketch.strokeWeight(2);\n    sketch.line(x1, y1, x2, y2);\n  }\n \n  sketch.mousePressed = () =&gt; {\n    var x = sketch.map(sketch.mouseX, 0, sketch.width, 0 , 1);\n    var y = sketch.map(sketch.mouseY, 0, sketch.height, 1, 0);\n    var point = sketch.createVector(x, y);\n    data.push(point);\n  }\n  \n  sketch.draw = () =&gt; {\n    sketch.background(230, 221, 222)\n    for (var i = 0; i &lt; data.length; i++) {\n      var x = sketch.map(data[i].x, 0, 1, 0, sketch.width);\n      var y = sketch.map(data[i].y, 0, 1, sketch.height, 0);\n      sketch.fill(32, 178, 170);\n      sketch.stroke(32, 178, 170);\n      sketch.ellipse(x, y, 8, 8);\n    }\n    \n    if(data.length &gt; 1) {\n      gradientDescent();\n      drawLine();\n    }\n  }\n})\n\n\n\n\n\n\n\nimport {p5} from \"@tmcw/p5\""
  },
  {
    "objectID": "myblog/posts/gradient-descent/index.html#implementing-linear-regression",
    "href": "myblog/posts/gradient-descent/index.html#implementing-linear-regression",
    "title": "A Brief introduction to linear regression using gradient descent",
    "section": "Implementing Linear Regression",
    "text": "Implementing Linear Regression\nNow its time to implement our linear regression model using gradient descent.\n\nGenerate Synthetic data\nUsing the above equation we will generate some synthetic data with w = 2 and b = 1 and some random noise.\n\nnp.random.seed(42)\nimport numpy as np\nx = np.random.randn(100,1)\ny = 1 + 2*x + np.random.randn(100,1)\n\nOur goal will be to accurately predict the value of w (i.e.¬†2) and b (i.e.¬†1).\n\n\nInitialize parameters (w and b) and hyperparameter (learning_rate)\nSo we will initialize the learnable parameters w and b with some random values and try to find right value by minimizing the loss function. The value of the hyperparameter i.e.¬†learning rate is fixed.\n\nw = np.random.randn(1)\nb = np.random.randn(1)\nlearning_rate = 0.001\n\n\n\nGradient Descent algorithm\n\nCompute the loss\n\nCompute the gradients\n\nUpdate the parameters\n\nRepeat\n\n\ndef gradient_descent(x,y,w,b,learning_rate):\n    dldw = 0.0 \n    dldb = 0.0\n    N = x.shape[0]\n    \n    \n    for xi, yi in zip(x,y):\n        dldw += -2*xi*(yi-(w*xi+b))\n        dldb += -2*(yi-(w*xi+b))\n    \n    #make an update to the parameters\n    w = w - learning_rate*(1/N)*dldw\n    b = b - learning_rate*(1/N)*dldb\n    return w,b\n\n\n\nIterate gradient descent function and update parameters to minimize loss.\n\nfor epoch in range(3000):\n    w, b = gradient_descent(x,y,w,b,learning_rate) \n    yhat =  w*x + b\n    loss =  np.divide(np.sum((y-yhat)**2, axis=0), x.shape[0])\n    #print(f'{epoch} loss is {loss}, parameters w:{w}, b:{b}')\nprint(w, b)\n\n[1.84846592] [1.00379672]"
  },
  {
    "objectID": "myblog/posts/gradient-descent/index.html#simple-linear-regression",
    "href": "myblog/posts/gradient-descent/index.html#simple-linear-regression",
    "title": "Linear regression using gradient descent",
    "section": "",
    "text": "A simple linear regression equation with one feature is defined as :\n\\[y = b + w * x + \\epsilon\\]\nHere w is coefficient and b is intercept term and \\(\\epsilon\\) is the noise."
  },
  {
    "objectID": "myblog/posts/gradient-descent/index.html#gradient-descent-variants",
    "href": "myblog/posts/gradient-descent/index.html#gradient-descent-variants",
    "title": "Linear regression using gradient descent",
    "section": "Gradient Descent Variants",
    "text": "Gradient Descent Variants\n\nBatch Gradient Descent\nStochastic Gradient Descent\nMini Batch Gradient Descent\n\nIf we use all the points in the training set to compute loss then it is batch gradient descent. If we use single data point and update our parameters it stochastic gradient descent. Anything between 1 and N is mini batch gradient descent."
  },
  {
    "objectID": "myblog/posts/gradient-descent/index.html#implementing-linear-regression-using-batch-gradient-descent",
    "href": "myblog/posts/gradient-descent/index.html#implementing-linear-regression-using-batch-gradient-descent",
    "title": "Linear regression using gradient descent",
    "section": "Implementing Linear Regression using batch gradient descent",
    "text": "Implementing Linear Regression using batch gradient descent\nNow its time to implement our linear regression model using batch gradient descent.\n\nGenerate Synthetic data\nUsing the above equation we will generate some synthetic data with w = 2 and b = 1 and some random noise.\n\nimport numpy as np\nnp.random.seed(42)\n\nx = np.random.randn(100,1)\ny = 1 + 2*x + np.random.randn(100,1)\n\nOur goal will be to accurately predict the value of w (i.e.¬†2) and b (i.e.¬†1).\n\n\nInitialize parameters (w and b) and hyperparameter (learning_rate)\nSo we will initialize the learnable parameters w and b with some random values and try to find right value by minimizing the loss function. The value of the hyperparameter i.e.¬†learning rate is fixed.\n\nw = np.random.randn(1)\nb = np.random.randn(1)\nlr = 0.001\n\n\n\nGradient Descent algorithm\n\ndef gradient_descent(x, y, w, b, lr):\n    \n    #compute the loss\n    yhat =  b + w*x\n    error = (y-yhat)\n    loss  = (error*2).mean()\n    \n    #compute the gradients\n    b_grad = -2*error.mean()\n    w_grad = -2*(x*error).mean()\n    \n    #update the parameters\n    b = b - lr * b_grad\n    w = w - lr * w_grad\n    return w,b\n\n\n# implementing multiple epochs \n\nfor epoch in range(5000):\n    w,b = gradient_descent(x, y, w, b, lr)\nprint(b,w)\n\n[1.00716235] [1.85616176]\n\n\nLet‚Äôs compare our output with scikit-learn‚Äôs Linear Regression\n\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(x, y)\nprint(lr.intercept_, lr.coef_[0])\n\n[1.00742783] [1.85674284]\n\n\nOur result matches upto few decimal places that means we have correctly implemented our batch gradient descent algorithm."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Vidyasagar Bhargava",
    "section": "Education",
    "text": "Education\nB.Tech in Computer Science & Engineering | University of Uttar Pradesh"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Vidyasagar Bhargava",
    "section": "Experience",
    "text": "Experience\nTVS Motors (2021-Present) Predictive maintenance Snapdeal (2015-2019) Price Optimization"
  },
  {
    "objectID": "myblog/posts/introduction-to-manim/Untitled.html",
    "href": "myblog/posts/introduction-to-manim/Untitled.html",
    "title": "Introduction to Manim",
    "section": "",
    "text": "Introduction\nA community maintained Python library for creating mathematical animations.\n\n\n%%manim -qm SimpleExample\n\nclass SimpleExample(Scene):\n    def construct(self):\n        blue_circle = Circle(color='#654a4e', fill_opacity=0.5)\n        green_square = Square(color='#20B2AA', fill_opacity=0.5)\n        green_square.next_to(blue_circle, RIGHT)\n        self.add(blue_circle, green_square)\n\n\n\n\n\n%%manim -qm AnimationExample\nclass AnimationExample(Scene):\n    def construct(self):\n        ax = Axes(x_range =(-3,3), y_range=(-3,3))\n        curve = ax.plot(lambda x: (x+2)*x*(x-2)/2, color='#654a4e')\n        self.add(ax,curve)\n       # self.play(Create(ax))\n\n\n\n\nGetting the area\n\n%%manim -qm AnimationExample\nclass AnimationExample(Scene):\n    def construct(self):\n        ax = Axes(x_range =(-3,3), y_range=(-3,3))\n        curve = ax.plot(lambda x: (x+2)*x*(x-2)/2, color='#654a4e')\n        area = ax.get_area(curve, x_range=(-2,0))\n        self.add(ax,curve, area)\n\n\n\n\nNow lets see some animation\n\n\n%%manim -v WARNING  --progress_bar None   --disable_caching AnimationExample\nconfig.media_embed = True\n\n\nclass AnimationExample(Scene):\n    def construct(self):\n        self.camera.background_color = '#e6ddde'\n        ax = Axes(x_range =(-3,3), y_range=(-3,3))\n        curve = ax.plot(lambda x: (x+2)*x*(x-2)/2, color='#654a4e')\n        area = ax.get_area(curve, x_range=(-2,0))\n        self.add(ax,curve, area)\n        self.play(Create(ax), Create(curve))\n        self.play(FadeIn(area))\n\n\n \n Your browser does not support the video tag.\n \n\n\n\nTo be continued‚Ä¶"
  },
  {
    "objectID": "projects/predictive_maintenance.html#section",
    "href": "projects/predictive_maintenance.html#section",
    "title": "Predictive Maintenance for NTORQ",
    "section": "",
    "text": "Tools : python\nMachine learning : Regression\nRole : Lead Data Scientist\nStatus : In progress"
  },
  {
    "objectID": "myblog/posts/Generative-AI/index.html",
    "href": "myblog/posts/Generative-AI/index.html",
    "title": "Introduction to Diffusion based Models",
    "section": "",
    "text": "Coming Soon"
  },
  {
    "objectID": "myblog/posts/Generative-AI/index.html#generative-model-evaluation",
    "href": "myblog/posts/Generative-AI/index.html#generative-model-evaluation",
    "title": "Introduction to Diffusion based Models",
    "section": "",
    "text": "A generative model is evaluated using FID scores (Fr√©chet Inception Distance). It measures how closely generated samples match real-world samples by comparing statistics between feature maps extracted from both sets of data using a pre-trained neural network. The lower the score, the better the quality and realism of generated images produced by a given model.\nLibrary like clean-fid is used to standardize the FID calculation.\n\nimport numpy as np"
  },
  {
    "objectID": "myblog/posts/Generative-AI/index.html#diffusion-models",
    "href": "myblog/posts/Generative-AI/index.html#diffusion-models",
    "title": "Introduction to Diffusion based Models",
    "section": "",
    "text": "Coming Soon"
  },
  {
    "objectID": "index.html#bio",
    "href": "index.html#bio",
    "title": "Vidyasagar Bhargava",
    "section": "",
    "text": "I‚Äôm a Lead Data Scientist at TVS Motor, working for connected mobility solutions department. My interests include Explainable AI, Computer Vision and Generative AI. I have 10+ years of experience in the field of Machine learning and Data Science where I worked with various clients in developing prescriptive as well as predictive solutions to address core business problems.\n\n\n\n\n\n\nRoot Cause Analysis for Low Range Trips in EVs\n\nPredictive Maintenance of Brakes in two wheelers\n\nRange Prediction and Analysis for EVs\nChurn Prediction in Telecom Industry\nPrice optimization Engine for Scientific Pricing of Fashion Products\nNPS Improvement using explainable AI\nRetail store segmentation\nAnomaly Detection for machine parts failure\n\n\n\n\n\nB.Tech in Computer Science and Engineering\nXII in Computer Science\n\n\n\n\n\nNeural Networks and Deep Learning\nImproving Deep Neural Networks: Hyperparameter Tuning, Regularization and Optimization\nBig Data Foundation\nIntroduction to Python"
  },
  {
    "objectID": "index.html#selected-projects",
    "href": "index.html#selected-projects",
    "title": "Vidyasagar Bhargava",
    "section": "",
    "text": "Generative AI | Ergonomic Methods for Assessing Spatial Models | 2023\nMachine Learning | Spatial Resampling Infrastructure | 2022\nunifir | A Unifying API for Working with Unity in R | 2022\nterrainr | Retrieve Data from the USGS National Map and Transform it for 3D Landscape Visualizations | 2021"
  },
  {
    "objectID": "index.html#interests",
    "href": "index.html#interests",
    "title": "Vidyasagar Bhargava",
    "section": "",
    "text": "Generative AI | Ergonomic Methods for Assessing Spatial Models | 2023\nComputer Vision | Spatial Resampling Infrastructure | 2022\nXAI"
  },
  {
    "objectID": "index.html#technologies",
    "href": "index.html#technologies",
    "title": "Vidyasagar Bhargava",
    "section": "",
    "text": "Programming - Python, SQL, R\nDeep Learning Framworks - PyTorch\nOther tools and Platforms - Databricks"
  },
  {
    "objectID": "index.html#programming",
    "href": "index.html#programming",
    "title": "Vidyasagar Bhargava",
    "section": "",
    "text": "Python, SQL, R"
  },
  {
    "objectID": "index.html#major-projects",
    "href": "index.html#major-projects",
    "title": "Vidyasagar Bhargava",
    "section": "",
    "text": "Root Cause Analysis for Low Range Trips in EVs.\nPredictive Maintenance for ICE Vehicles\nRange Prediction for Electric Vehicle\nChurn Prediction for Telecom Company\nNPS Improvement for US based client\nBenchmarking of trained sentence embedding models\nScaling Machine Learning models using Spark\nDashboard for Time Series forecasting using Dash & Plotly\nRetail store segmentation\nAnomaly Detection for machine parts failure\nPrice optimization Engine based on price elasticity models\n\n\n\n\nB.Tech in Computer Science and Engineering\n\n\n\n\n\nMachine Learning Course by Andrew NG\nDeep learning Course by Andrew NG\nBig Data Foundation by IBM\nIntroduction to Python by Kaggle\n\n\n\n\n\nIntroduction to Deep learning at Wipro Technologies on June 2017. [PPT]"
  },
  {
    "objectID": "index.html#talks-webinars",
    "href": "index.html#talks-webinars",
    "title": "Vidyasagar Bhargava",
    "section": "",
    "text": "Introduction to Deep learning at Wipro Technologies on June 2017. [PPT]"
  },
  {
    "objectID": "index.html#honors-awards",
    "href": "index.html#honors-awards",
    "title": "Vidyasagar Bhargava",
    "section": "",
    "text": "Thinking Hat at Wipro Limited | 2018\nBull‚Äôs Eye Award at Snapdeal | 2015"
  },
  {
    "objectID": "research/research.html",
    "href": "research/research.html",
    "title": "Research Papers",
    "section": "",
    "text": "In this series I try to understand and implement research papers using python and deeplearning frameworks like pytorch or JAX.\n\n\n\n\n\n\n\n\n  \n\n\n\n\nLeNet-5\n\n\n\n\n\nLeNet-5 is introduced by Yann LeCun, Leon Bottou, Yoshua Bengio and Patrick Haffner in the year 1998 in the paper Gradient-Based Learning Applied to Document Recognition. LeNet is a classic convolutional neural network employing the use of convolutions, pooling and fully connected layers. It was used for the handwritten digit recognition task with the MNIST dataset.\n\n\n\n\n\n\nMay 8, 2022\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "research/papers/alexnet/index.html",
    "href": "research/papers/alexnet/index.html",
    "title": "Lenet-5",
    "section": "",
    "text": "img"
  },
  {
    "objectID": "research/posts/lenet/index.html",
    "href": "research/posts/lenet/index.html",
    "title": "LeNet-5",
    "section": "",
    "text": "Here we will be using famous MNIST dataset which contains hand written digits. These are greyscale with size of 28x28 composed of 60,000 training images and 10,000 testing images."
  },
  {
    "objectID": "research/posts/lenet/index.html#testing",
    "href": "research/posts/lenet/index.html#testing",
    "title": "LeNet-5",
    "section": "Testing",
    "text": "Testing\n\n# Test the model\n# In test phase, we don't need to compute gradients (for memory efficiency)\n  \nwith torch.no_grad():\n    correct = 0\n    total = 0\n    for images, labels in test_loader:\n        images = images.to(device)\n        labels = labels.to(device)\n        outputs = model(images)\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\n    print('Accuracy of the network on the 10000 test images: {} %'.format(100 * correct / total))\n     \n\nAccuracy of the network on the 10000 test images: 98.95 %\n\n\nUsing this model, we get around 98.95% accuracy which is quite good."
  },
  {
    "objectID": "research/posts/lenet/index.html#conclusions",
    "href": "research/posts/lenet/index.html#conclusions",
    "title": "LeNet-5",
    "section": "Conclusions",
    "text": "Conclusions\n\nWe started by learning the architecture of LeNet5 and the different kinds of layers in that.\n\nThen we built LeNet5 from scratch along with defining hyperparameters for the model.\n\nFinally, we trained and tested our model on the MNIST dataset, and the model seemed to perform well on the test dataset."
  },
  {
    "objectID": "research/posts/lenet/index.html#dataset",
    "href": "research/posts/lenet/index.html#dataset",
    "title": "LeNet-5",
    "section": "",
    "text": "Here we will be using famous MNIST dataset which contains hand written digits. These are greyscale with size of 28x28 composed of 60,000 training images and 10,000 testing images."
  },
  {
    "objectID": "research/posts/lenet/index.html#dataset-understanding",
    "href": "research/posts/lenet/index.html#dataset-understanding",
    "title": "LeNet-5",
    "section": "Dataset Understanding",
    "text": "Dataset Understanding\nHere we will be using famous MNIST dataset which contains hand written digits. These are greyscale with size of 28x28 composed of 60,000 training images and 10,000 testing images.\n\nImporting Libraries\n\n# loading the relevant libraries\nimport torch\nimport torch.nn as nn \nimport torchvision\nimport torchvision.transforms as transforms\n\n# Define the relevant variables\nbatch_size = 64\nnum_classes = 10\nlearning_rate = 0.001\nnum_epochs = 10\n\n# Device will determine whether to run the training on GPU or CPU.\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\n\n\nLoading the Dataset\nUsing the torchvision library we will load the dataset.\n\n\n#Loading the dataset and preprocessing\ntrain_dataset = torchvision.datasets.MNIST(root = './data',\n                                           train = True,\n                                           transform = transforms.Compose([\n                                                  transforms.Resize((32,32)),\n                                                  transforms.ToTensor(),\n                                                  transforms.Normalize(mean = (0.1307,), std = (0.3081,))]),\n                                           download = True)\n\n\ntest_dataset = torchvision.datasets.MNIST(root = './data',\n                                          train = False,\n                                          transform = transforms.Compose([\n                                                  transforms.Resize((32,32)),\n                                                  transforms.ToTensor(),\n                                                  transforms.Normalize(mean = (0.1325,), std = (0.3105,))]),\n                                          download=True)\n\n\ntrain_loader = torch.utils.data.DataLoader(dataset = train_dataset,\n                                           batch_size = batch_size,\n                                           shuffle = True)\n\n\ntest_loader = torch.utils.data.DataLoader(dataset = test_dataset,\n                                           batch_size = batch_size,\n                                           shuffle = True)\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe MNIST data can‚Äôt be used as it is for the LeNet5 architecture. The LeNet5 architecture accepts the input to be 32x32 and the MNIST images are 28x28. We can fix this by resizing the images, normalizing them using the pre-calculated mean and standard deviation (available online), and finally storing them as tensors.\n\n\n\n\nLeNet5 from Scratch\n\n#Defining the convolutional neural network\nclass LeNet5(nn.Module):\n    def __init__(self, num_classes):\n        super().__init__()\n        self.layer1 = nn.Sequential(\n            nn.Conv2d(1, 6, kernel_size=5, stride=1, padding=0),\n            nn.BatchNorm2d(6),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size = 2, stride = 2))\n        self.layer2 = nn.Sequential(\n            nn.Conv2d(6, 16, kernel_size=5, stride=1, padding=0),\n            nn.BatchNorm2d(16),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size = 2, stride = 2))\n        self.fc = nn.Linear(400, 120)\n        self.relu = nn.ReLU()\n        self.fc1 = nn.Linear(120, 84)\n        self.relu1 = nn.ReLU()\n        self.fc2 = nn.Linear(84, num_classes)\n        \n    def forward(self, x):\n        out = self.layer1(x)\n        out = self.layer2(out)\n        out = out.reshape(out.size(0), -1)\n        out = self.fc(out)\n        out = self.relu(out)\n        out = self.fc1(out)\n        out = self.relu1(out)\n        out = self.fc2(out)\n        return out\n\n\n\nSetting up hyperparameters\n\nmodel = LeNet5(num_classes).to(device)\n\n#Setting the loss function\ncost = nn.CrossEntropyLoss()\n\n#Setting the optimizer with the model parameters and learning rate\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n\n#this is defined to print how many steps are remaining when training\ntotal_step = len(train_loader)\n\n\n\nModel Training\n\ntotal_step = len(train_loader)\nfor epoch in range(num_epochs):\n    for i, (images, labels) in enumerate(train_loader):  \n        images = images.to(device)\n        labels = labels.to(device)\n        \n        #Forward pass\n        outputs = model(images)\n        loss = cost(outputs, labels)\n            \n        # Backward and optimize\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n                \n        if (i+1) % 400 == 0:\n            print ('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}' \n                           .format(epoch+1, num_epochs, i+1, total_step, loss.item()))\n\nEpoch [1/10], Step [400/938], Loss: 0.0479\nEpoch [1/10], Step [800/938], Loss: 0.0914\nEpoch [2/10], Step [400/938], Loss: 0.0037\nEpoch [2/10], Step [800/938], Loss: 0.0340\nEpoch [3/10], Step [400/938], Loss: 0.1965\nEpoch [3/10], Step [800/938], Loss: 0.0506\nEpoch [4/10], Step [400/938], Loss: 0.0844\nEpoch [4/10], Step [800/938], Loss: 0.0350\nEpoch [5/10], Step [400/938], Loss: 0.0124\nEpoch [5/10], Step [800/938], Loss: 0.0635\nEpoch [6/10], Step [400/938], Loss: 0.0359\nEpoch [6/10], Step [800/938], Loss: 0.0013\nEpoch [7/10], Step [400/938], Loss: 0.0028\nEpoch [7/10], Step [800/938], Loss: 0.0324\nEpoch [8/10], Step [400/938], Loss: 0.0084\nEpoch [8/10], Step [800/938], Loss: 0.0299\nEpoch [9/10], Step [400/938], Loss: 0.0019\nEpoch [9/10], Step [800/938], Loss: 0.0951\nEpoch [10/10], Step [400/938], Loss: 0.1446\nEpoch [10/10], Step [800/938], Loss: 0.0311\n\n\nAs we can see, the loss is decreasing with every epoch which shows that our model is indeed learning.\n\n\nModel Testing\n\n# Test the model\n# In test phase, we don't need to compute gradients (for memory efficiency)\n  \nwith torch.no_grad():\n    correct = 0\n    total = 0\n    for images, labels in test_loader:\n        images = images.to(device)\n        labels = labels.to(device)\n        outputs = model(images)\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\n    print('Accuracy of the network on the 10000 test images: {} %'.format(100 * correct / total))\n     \n\nAccuracy of the network on the 10000 test images: 98.95 %\n\n\nUsing this model, we get around 98.95% accuracy which is quite good."
  }
]