[
  {
    "objectID": "posts/eda.html",
    "href": "posts/eda.html",
    "title": "The Google’s Guide to Exploratory Data Analysis",
    "section": "",
    "text": "How to EDA\nI divide exploratory data analysis in 3 parts of investigation.\n\nStructure Investigation : Exploring shape and as well as data types.\n1.1 Structure of non numerical features\n1.2 Structure of numerical features\n1.3 Conclusion of structure investigation\n\nQuality Investigation : To check general quality of datasets in regard to duplicates,missing values and unwanted entries.\n2.1 Duplicates\n2.2 Missing Values\n2.2.1 Per sample\n2.2.2 Per feature\n2.3 Unwanted Entries and Recording Errors\n2.3.1 Numerical features\n2.3.2 Non Numerical features\n2.4 Conclusion of Quality Investigation\nContent Investigation : More indepth study of features and how they relate to each other. 3.1 Feature distribution\n3.2 Feature patterns\n3.2.1 Continuos feature\n3.2.2 Discreet and ordinal feature\n3.3 Feature relantionship\n\n\n\nExample Case\nLet’s download some data and perform eda to bring insights as well know quality of the data.\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.datasets import fetch_openml\n\n# Download the dataset from openml\ndataset = fetch_openml(data_id=42803, as_frame=True)\n\n# Extract feature matrix X and show 5 random samples\ndf_X = dataset[\"frame\"]\ndf_X.head(5)\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Vehicle_Reference_df_res\n      Vehicle_Type\n      Towing_and_Articulation\n      Vehicle_Manoeuvre\n      Vehicle_Location-Restricted_Lane\n      Junction_Location\n      Skidding_and_Overturning\n      Hit_Object_in_Carriageway\n      Vehicle_Leaving_Carriageway\n      ...\n      Age_Band_of_Casualty\n      Casualty_Severity\n      Pedestrian_Location\n      Pedestrian_Movement\n      Car_Passenger\n      Bus_or_Coach_Passenger\n      Pedestrian_Road_Maintenance_Worker\n      Casualty_Type\n      Casualty_Home_Area_Type\n      Casualty_IMD_Decile\n    \n  \n  \n    \n      0\n      201501BS70001\n      1.0\n      19.0\n      0.0\n      9.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      7.0\n      3.0\n      5.0\n      1.0\n      0.0\n      0.0\n      2.0\n      0.0\n      NaN\n      NaN\n    \n    \n      1\n      201501BS70002\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      5.0\n      3.0\n      9.0\n      9.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      3.0\n    \n    \n      2\n      201501BS70004\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      2.0\n      0.0\n      0.0\n      0.0\n      ...\n      6.0\n      3.0\n      1.0\n      3.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      6.0\n    \n    \n      3\n      201501BS70005\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      2.0\n      0.0\n      0.0\n      0.0\n      ...\n      2.0\n      3.0\n      5.0\n      1.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      2.0\n    \n    \n      4\n      201501BS70008\n      1.0\n      1.0\n      0.0\n      18.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      8.0\n      2.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      1.0\n      3.0\n    \n  \n\n5 rows × 67 columns\n\n\n\n\n\nStructure Investigation\n\ndf_X.shape\n\n(363243, 67)\n\n\n\nimport pandas as pd\npd.value_counts(df_X.dtypes)\n\nfloat64    61\nobject      6\ndtype: int64\n\n\n\n\nStructure of Non Numerical Features\n\n# Display non-numerical features\ndf_X.select_dtypes(exclude=\"number\").head()\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Sex_of_Driver\n      Date\n      Time\n      Local_Authority_(Highway)\n      LSOA_of_Accident_Location\n    \n  \n  \n    \n      0\n      201501BS70001\n      1.0\n      12/01/2015\n      18:45\n      E09000020\n      E01002825\n    \n    \n      1\n      201501BS70002\n      1.0\n      12/01/2015\n      07:50\n      E09000020\n      E01002820\n    \n    \n      2\n      201501BS70004\n      1.0\n      12/01/2015\n      18:08\n      E09000020\n      E01002833\n    \n    \n      3\n      201501BS70005\n      1.0\n      13/01/2015\n      07:40\n      E09000020\n      E01002874\n    \n    \n      4\n      201501BS70008\n      1.0\n      09/01/2015\n      07:30\n      E09000020\n      E01002814\n    \n  \n\n\n\n\n\n# Changes data type of 'Sex_of_Driver'\ndf_X[\"Sex_of_Driver\"] = df_X[\"Sex_of_Driver\"].astype(\"float\")\n\n\ndf_X.describe(exclude=\"number\")\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Date\n      Time\n      Local_Authority_(Highway)\n      LSOA_of_Accident_Location\n    \n  \n  \n    \n      count\n      363243\n      319866\n      319822\n      319866\n      298758\n    \n    \n      unique\n      140056\n      365\n      1439\n      204\n      25979\n    \n    \n      top\n      201543P296025\n      14/02/2015\n      17:30\n      E10000017\n      E01028497\n    \n    \n      freq\n      1332\n      2144\n      2972\n      8457\n      1456\n    \n  \n\n\n\n\n\n\nStructure of Numerical Features\n\n# from matplotlib.offsetbox import AnnotationBbox, OffsetImage\n# import matplotlib.image as mpimg\n# def insert_image(path, zoom, xybox, ax):\n#     '''Insert an image within matplotlib'''\n#     imagebox = OffsetImage(mpimg.imread(path), zoom=zoom)\n#     ab = AnnotationBbox(imagebox, xy=(0.5, 0.7), frameon=False, pad=1, xybox=xybox)\n#     ax.add_artist(ab)\n\n\n\n# For each numerical feature compute number of unique entries\nsns.set(rc={'axes.facecolor':'#e6ddde', 'figure.facecolor':'#e6ddde'})\n\nfig, ax = plt.subplots(figsize=(10, 8))\n\nunique_values = df_X.select_dtypes(include=\"number\").nunique().sort_values()\n\n# Plot information with y-axis in log-scale\nunique_values.plot.bar(logy=True, figsize=(15, 4), title=\"Unique values per feature\",  color='#753742');\n\n\n\n\n\n\nQuality Investigation\n\n# Check number of duplicates while ignoring the index feature\nn_duplicates = df_X.drop(labels=[\"Accident_Index\"], axis=1).duplicated().sum()\nprint(f\"You seem to have {n_duplicates} duplicates in your database.\")\n\nYou seem to have 22 duplicates in your database.\n\n\n\n#  Extract column names of all features, except 'Accident_Index'\ncolumns_to_consider = df_X.drop(labels=[\"Accident_Index\"], axis=1).columns\n\n# Drop duplicates based on 'columns_to_consider'\ndf_X = df_X.drop_duplicates(subset=columns_to_consider)\ndf_X.shape\n\n(363221, 67)\n\n\nYou can check this link for guide\n\n\n\n\nA comment in the margin"
  },
  {
    "objectID": "posts/fbeta_measure.html",
    "href": "posts/fbeta_measure.html",
    "title": "Fbeta-Measure",
    "section": "",
    "text": "Precision is a metric that calculates the percentage of correct predictions for the positive class. Recall calculates the percentage of correct predictions for the positive class out of all positive predictions that could be made.\nThe F-measure or F score, also called as F1 score is calculated as the harmonic mean of precision and recall, giving each the same weighting.It allows a model to be evaluated taking both the precision and recall into account using a single score, which is helpful when describing the performance of the model and in comparing models.\n\n\n\\[\nF_{1}=2.\\frac{{precision} \\times {recall}}{{precision} + {recall}}\n\\]\nThe Fbeta-measure is a generalization of the F-measure that adds a configuration parameter called beta. A default beta value is 1.0, which is the same as the F-measure. A smaller beta value, such as 0.5, gives more weight to precision and less to recall, whereas a larger beta value, such as 2.0, gives less weight to precision and more weight to recall in the calculation of the score.\n\n\n\\[\nF_{{\\beta}} = \\frac{(1 + {\\beta}^2). (precision.recall)}{({\\beta}^2.precision+recall)}\n\\]\nSummary\n\nPrecision and recall provide two ways to summarize the errors made for the positive class in a binary classification problem.\n\nF-measure provides a single score that summarizes the precision and recall.\n\nFbeta-measure provides a configurable version of the F-measure to give more or less attention to the precision and recall measure when calculating a single score."
  },
  {
    "objectID": "talks.html",
    "href": "talks.html",
    "title": "",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Vidyasagar Bhargava",
    "section": "",
    "text": "Lead Data Scientist at TVS Motor"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "CV",
    "section": "",
    "text": "Work Experience & Major Projects\n\nTVS Motor :- Lead Data Scientist (2021 - Present)\n\nPredictive Maintenace\nRange Prediction for Electric Vehicle\n\nWipro Technologies :- Specialist Data Science (2017 - 2021)\n\nChurn Prediction for Telecom Company\nNPS Improvement for US based client\nBenchmarking of trained sentence embedding models\nScaling Machine Learning models using Spark\nDashboard for Time Series forecasting using Dash & Plotly\n\nCognizant Techonology Solution :- Data Scientist (2016 - 2017)\n\nRetail store segmentation\nAnomaly Detection for machine parts failure\n\nSnapdeal :- Analyst Advanced Analytics (2014 - 2016)\n\nPrice optimization Engine\n\nPrice Elasticity Models\n\nLadyblush E-Commerce Pvt. Ltd (Start up) :- Engineer (2014 - 2014)\n\nE-commerce AI Chatbot\nData Analytics and Dashboarding\n\nShopclues :- Analyst (2013 - 2014)\n\nData Analytics and Dashboarding\n\n\n\nEducation\n\nB.Tech in Computer Science and Engineering\n\n\n\nCourses\n\nMachine Learning Course by Andrew NG\nDeep learning Course by Andrew NG\nBig Data Foundation by IBM\nIntroduction to Python by Kaggle\n\n\n\nTalks & Webinars\n\nIntroduction to Deep learning at Wipro Technologies on June 2017. [PPT]"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "A generalization of the F-measure that adds a configuration parameter called beta\n\n\n\n\n\n\nJun 10, 2022\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nA generalization of the F-measure that adds a configuration parameter called beta\n\n\n\n\n\n\nJun 10, 2022\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nNearest neighbor classifiers are defined by their characteristic of classifying unlabeled examples by assigning them the class of similar labeled examples.\n\n\n\n\n\n\nJun 8, 2022\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nNearest neighbor classifiers are defined by their characteristic of classifying unlabeled examples by assigning them the class of similar labeled examples.\n\n\n\n\n\n\nJun 8, 2022\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nPrinciples and process for democratizing ML projects\n\n\n\n\n\n\nJul 13, 2019\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nPrinciples and process for democratizing ML projects\n\n\n\n\n\n\nJul 13, 2019\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nA way of summarizing, interpreting and visualizing the information hidden in rows and column format.\n\n\n\n\n\n\nJun 11, 2019\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nA way of summarizing, interpreting and visualizing the information hidden in rows and column format.\n\n\n\n\n\n\nJun 11, 2019\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/eda.html#exploratory-data-analysis",
    "href": "posts/eda.html#exploratory-data-analysis",
    "title": "",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\nExploratory Data Analysis in short known as EDA is way of summarizing, interpreting and visualizing the information hidden in rows and column format. Simply EDA is the key to getting insights from data.\nWhy EDA is important ?\nUsually we start any data science project with understanding the business problem and then we generate hypothesis. During hypothesis generation we look for factors which influence our dependent variable. EDA helps in confirming and validating those hypothesis.\nIt helps to find out unexpected pattern in data which must be taken into account, thereby suggesting some changes in planned analysis.\nIt helps in delivering data driven insights to business stakeholders by confirming they are asking the right questions and not biasing the investigation with their assumptions.\nStructure Investigation : Exploring shape and as well as data types\nQuality Investigation : To check general quality of datasets in regard to duplicates,missing values and unwanted entries\nContent Investigation : More indepth study of features and how they relate to each other\n\nfrom sklearn.datasets import fetch_openml\n# Download the dataset from openml\ndataset = fetch_openml(data_id=42803, as_frame=True)\n\n# Extract feature matrix X and show 5 random samples\ndf_X = dataset[\"frame\"]\ndf_X\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Vehicle_Reference_df_res\n      Vehicle_Type\n      Towing_and_Articulation\n      Vehicle_Manoeuvre\n      Vehicle_Location-Restricted_Lane\n      Junction_Location\n      Skidding_and_Overturning\n      Hit_Object_in_Carriageway\n      Vehicle_Leaving_Carriageway\n      ...\n      Age_Band_of_Casualty\n      Casualty_Severity\n      Pedestrian_Location\n      Pedestrian_Movement\n      Car_Passenger\n      Bus_or_Coach_Passenger\n      Pedestrian_Road_Maintenance_Worker\n      Casualty_Type\n      Casualty_Home_Area_Type\n      Casualty_IMD_Decile\n    \n  \n  \n    \n      0\n      201501BS70001\n      1.0\n      19.0\n      0.0\n      9.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      7.0\n      3.0\n      5.0\n      1.0\n      0.0\n      0.0\n      2.0\n      0.0\n      NaN\n      NaN\n    \n    \n      1\n      201501BS70002\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      5.0\n      3.0\n      9.0\n      9.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      3.0\n    \n    \n      2\n      201501BS70004\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      2.0\n      0.0\n      0.0\n      0.0\n      ...\n      6.0\n      3.0\n      1.0\n      3.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      6.0\n    \n    \n      3\n      201501BS70005\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      2.0\n      0.0\n      0.0\n      0.0\n      ...\n      2.0\n      3.0\n      5.0\n      1.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      2.0\n    \n    \n      4\n      201501BS70008\n      1.0\n      1.0\n      0.0\n      18.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      8.0\n      2.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      1.0\n      3.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      363238\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      1.0\n      3.0\n      0.0\n      0.0\n      2.0\n      0.0\n      0.0\n      9.0\n      1.0\n      NaN\n    \n    \n      363239\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      5.0\n      3.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      9.0\n      1.0\n      2.0\n    \n    \n      363240\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      4.0\n      3.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      9.0\n      2.0\n      5.0\n    \n    \n      363241\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      6.0\n      3.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      9.0\n      3.0\n      NaN\n    \n    \n      363242\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      4.0\n      3.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      9.0\n      1.0\n      4.0\n    \n  \n\n363243 rows × 67 columns\n\n\n\n\nStructure Investigation\n\ndf_X.shape\n\n(363243, 67)\n\n\n\nimport pandas as pd\npd.value_counts(df_X.dtypes)\n\nfloat64    61\nobject      6\ndtype: int64\n\n\n\n\nStructure of Non Numerical Features\n\n# Display non-numerical features\ndf_X.select_dtypes(exclude=\"number\").head()\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Sex_of_Driver\n      Date\n      Time\n      Local_Authority_(Highway)\n      LSOA_of_Accident_Location\n    \n  \n  \n    \n      0\n      201501BS70001\n      1.0\n      12/01/2015\n      18:45\n      E09000020\n      E01002825\n    \n    \n      1\n      201501BS70002\n      1.0\n      12/01/2015\n      07:50\n      E09000020\n      E01002820\n    \n    \n      2\n      201501BS70004\n      1.0\n      12/01/2015\n      18:08\n      E09000020\n      E01002833\n    \n    \n      3\n      201501BS70005\n      1.0\n      13/01/2015\n      07:40\n      E09000020\n      E01002874\n    \n    \n      4\n      201501BS70008\n      1.0\n      09/01/2015\n      07:30\n      E09000020\n      E01002814\n    \n  \n\n\n\n\n\n# Changes data type of 'Sex_of_Driver'\ndf_X[\"Sex_of_Driver\"] = df_X[\"Sex_of_Driver\"].astype(\"float\")\n\n\ndf_X.describe(exclude=\"number\")\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Date\n      Time\n      Local_Authority_(Highway)\n      LSOA_of_Accident_Location\n    \n  \n  \n    \n      count\n      363243\n      319866\n      319822\n      319866\n      298758\n    \n    \n      unique\n      140056\n      365\n      1439\n      204\n      25979\n    \n    \n      top\n      201543P296025\n      14/02/2015\n      17:30\n      E10000017\n      E01028497\n    \n    \n      freq\n      1332\n      2144\n      2972\n      8457\n      1456\n    \n  \n\n\n\n\n\n\nStructure of Numerical Features\n\n# For each numerical feature compute number of unique entries\nunique_values = df_X.select_dtypes(include=\"number\").nunique().sort_values()\n\n# Plot information with y-axis in log-scale\nunique_values.plot.bar(logy=True, figsize=(15, 4), title=\"Unique values per feature\");\n\n\n\n\n\n\nQuality Investigation\n\n# Check number of duplicates while ignoring the index feature\nn_duplicates = df_X.drop(labels=[\"Accident_Index\"], axis=1).duplicated().sum()\nprint(f\"You seem to have {n_duplicates} duplicates in your database.\")\n\nYou seem to have 22 duplicates in your database.\n\n\n\n#  Extract column names of all features, except 'Accident_Index'\ncolumns_to_consider = df_X.drop(labels=[\"Accident_Index\"], axis=1).columns\n\n# Drop duplicates based on 'columns_to_consider'\ndf_X = df_X.drop_duplicates(subset=columns_to_consider)\ndf_X.shape\n\n(363221, 67)\n\n\n\n\nMissing Values\n\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 8))\nplt.imshow(df_X.isna(), aspect=\"auto\", interpolation=\"nearest\", cmap=\"gray\")\nplt.xlabel(\"Column Number\")\nplt.ylabel(\"Sample Number\");\n\n\n\n\n\n\n\n\nWe know from the first fundamental theorem of calculus that for \\(x\\) in \\([a, b]\\):\n\\[\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).\\]"
  },
  {
    "objectID": "posts/Untitled.html",
    "href": "posts/Untitled.html",
    "title": "",
    "section": "",
    "text": "---\ntitle: \"Decision Tree\"\ndescription: \"\"\nauthor: \"Vidyasagar Bhargava\"\ndate: \"07/08/2022\"\ncategories:\n  - machine learning\n  - supervised learning\n  - algorithm\n  - classifier\n  - regression\nformat:\n    html:\n        code-fold: false\njupyter: python3\nexecute: \n  enabled: true\ntitle-block-banner: true\n---"
  },
  {
    "objectID": "posts/Untitled.html#strength",
    "href": "posts/Untitled.html#strength",
    "title": "Nearest Neighbour Classifier",
    "section": "Strength",
    "text": "Strength\n\nSimple and effective\nMakes no assumption about data\nFast Training Process"
  },
  {
    "objectID": "posts/Untitled.html#weakness",
    "href": "posts/Untitled.html#weakness",
    "title": "Nearest Neighbour Classifier",
    "section": "Weakness",
    "text": "Weakness\n\nDoesn’t produce model, limiting the ability to understand how features are related to class\nRequires selection of k\nSlow classification phase\nCategorical features and missing data require pre processing\n\nThe k-Nearest Neighbor algorithm uses nearest k number of neighbors for labeling of an unlabeled example. The unlabeled test example is assigned the class of majority of the k-Nearest Neighbors.\nFor finding the distance k-NN algorithm uses Euclidean distance."
  },
  {
    "objectID": "posts/Untitled.html#defining-the-dataset",
    "href": "posts/Untitled.html#defining-the-dataset",
    "title": "Nearest Neighbour Classifier",
    "section": "Defining the dataset",
    "text": "Defining the dataset\n\n# First Feature\nweather=['Sunny','Sunny','Overcast','Rainy','Rainy','Rainy','Overcast','Sunny','Sunny',\n'Rainy','Sunny','Overcast','Overcast','Rainy']\n# Second Feature\ntemp=['Hot','Hot','Hot','Mild','Cool','Cool','Cool','Mild','Cool','Mild','Mild','Mild','Hot','Mild']\n\n# Label or target varible\nplay=['No','No','Yes','Yes','Yes','No','Yes','No','Yes','Yes','Yes','Yes','Yes','No']\n\nWe have two features weather and temperature and one label play."
  },
  {
    "objectID": "posts/Untitled.html#encoding-data-columns",
    "href": "posts/Untitled.html#encoding-data-columns",
    "title": "Nearest Neighbour Classifier",
    "section": "Encoding data columns",
    "text": "Encoding data columns\n\nfrom sklearn import preprocessing\n\n#creating labelEncoder\nle = preprocessing.LabelEncoder()\n\n# Converting string labels into numbers.\nweather_encoded=le.fit_transform(weather)\n\nSimilarly, you can encode temperature and label into numeric columns.\n\n# converting string labels into numbers\ntemp_encoded=le.fit_transform(temp)\nlabel=le.fit_transform(play)"
  },
  {
    "objectID": "posts/Untitled.html#combining-features",
    "href": "posts/Untitled.html#combining-features",
    "title": "Nearest Neighbour Classifier",
    "section": "Combining Features",
    "text": "Combining Features\n\n#combinig weather and temp into single listof tuples\nfeatures=list(zip(weather_encoded,temp_encoded))"
  },
  {
    "objectID": "posts/Untitled.html#generating-models",
    "href": "posts/Untitled.html#generating-models",
    "title": "Nearest Neighbour Classifier",
    "section": "Generating Models",
    "text": "Generating Models\n\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier(n_neighbors=3)\n\n# Train the model using the training sets\nmodel.fit(features,label)\n\nKNeighborsClassifier(n_neighbors=3)"
  },
  {
    "objectID": "posts/Untitled.html#predict-output",
    "href": "posts/Untitled.html#predict-output",
    "title": "Nearest Neighbour Classifier",
    "section": "Predict Output",
    "text": "Predict Output\n\npredicted= model.predict([[0,2]]) # 0:Overcast, 2:Mild\nprint(predicted)\n\n[1]"
  },
  {
    "objectID": "posts/nearest_neighbour.html#strength",
    "href": "posts/nearest_neighbour.html#strength",
    "title": "Nearest Neighbour Classifier",
    "section": "Strength",
    "text": "Strength\n\nSimple and effective\nMakes no assumption about data\nFast Training Process"
  },
  {
    "objectID": "posts/nearest_neighbour.html#weakness",
    "href": "posts/nearest_neighbour.html#weakness",
    "title": "Nearest Neighbour Classifier",
    "section": "Weakness",
    "text": "Weakness\n\nDoesn’t produce model, limiting the ability to understand how features are related to class\nRequires selection of k\nSlow classification phase\nCategorical features and missing data require pre processing\n\nThe k-Nearest Neighbor algorithm uses nearest k number of neighbors for labeling of an unlabeled example. The unlabeled test example is assigned the class of majority of the k-Nearest Neighbors.\nFor finding the distance k-NN algorithm uses Euclidean distance."
  },
  {
    "objectID": "posts/nearest_neighbour.html#defining-the-dataset",
    "href": "posts/nearest_neighbour.html#defining-the-dataset",
    "title": "Nearest Neighbour Classifier",
    "section": "Defining the dataset",
    "text": "Defining the dataset\n\n# First Feature\nweather=['Sunny','Sunny','Overcast','Rainy','Rainy','Rainy','Overcast','Sunny','Sunny',\n'Rainy','Sunny','Overcast','Overcast','Rainy']\n# Second Feature\ntemp=['Hot','Hot','Hot','Mild','Cool','Cool','Cool','Mild','Cool','Mild','Mild','Mild','Hot','Mild']\n\n# Label or target varible\nplay=['No','No','Yes','Yes','Yes','No','Yes','No','Yes','Yes','Yes','Yes','Yes','No']\n\nWe have two features weather and temperature and one label play."
  },
  {
    "objectID": "posts/nearest_neighbour.html#encoding-data-columns",
    "href": "posts/nearest_neighbour.html#encoding-data-columns",
    "title": "Nearest Neighbour Classifier",
    "section": "Encoding data columns",
    "text": "Encoding data columns\n\nfrom sklearn import preprocessing\n\n#creating labelEncoder\nle = preprocessing.LabelEncoder()\n\n# Converting string labels into numbers.\nweather_encoded=le.fit_transform(weather)\n\nSimilarly, you can encode temperature and label into numeric columns.\n\n# converting string labels into numbers\ntemp_encoded=le.fit_transform(temp)\nlabel=le.fit_transform(play)"
  },
  {
    "objectID": "posts/nearest_neighbour.html#combining-features",
    "href": "posts/nearest_neighbour.html#combining-features",
    "title": "Nearest Neighbour Classifier",
    "section": "Combining Features",
    "text": "Combining Features\n\n#combinig weather and temp into single listof tuples\nfeatures=list(zip(weather_encoded,temp_encoded))"
  },
  {
    "objectID": "posts/nearest_neighbour.html#generating-models",
    "href": "posts/nearest_neighbour.html#generating-models",
    "title": "Nearest Neighbour Classifier",
    "section": "Generating Models",
    "text": "Generating Models\n\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier(n_neighbors=3)\n\n# Train the model using the training sets\nmodel.fit(features,label)\n\nKNeighborsClassifier(n_neighbors=3)"
  },
  {
    "objectID": "posts/nearest_neighbour.html#predict-output",
    "href": "posts/nearest_neighbour.html#predict-output",
    "title": "Nearest Neighbour Classifier",
    "section": "Predict Output",
    "text": "Predict Output\n\npredicted= model.predict([[0,2]]) # 0:Overcast, 2:Mild\nprint(predicted)\n\n[1]"
  },
  {
    "objectID": "posts/eda.html#how",
    "href": "posts/eda.html#how",
    "title": "Exploratory Data Analysis",
    "section": "How",
    "text": "How\nStructure Investigation : Exploring shape and as well as data types\nQuality Investigation : To check general quality of datasets in regard to duplicates,missing values and unwanted entries\nContent Investigation : More indepth study of features and how they relate to each other\n\nfrom sklearn.datasets import fetch_openml\n# Download the dataset from openml\ndataset = fetch_openml(data_id=42803, as_frame=True)\n\n# Extract feature matrix X and show 5 random samples\ndf_X = dataset[\"frame\"]\ndf_X\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Vehicle_Reference_df_res\n      Vehicle_Type\n      Towing_and_Articulation\n      Vehicle_Manoeuvre\n      Vehicle_Location-Restricted_Lane\n      Junction_Location\n      Skidding_and_Overturning\n      Hit_Object_in_Carriageway\n      Vehicle_Leaving_Carriageway\n      ...\n      Age_Band_of_Casualty\n      Casualty_Severity\n      Pedestrian_Location\n      Pedestrian_Movement\n      Car_Passenger\n      Bus_or_Coach_Passenger\n      Pedestrian_Road_Maintenance_Worker\n      Casualty_Type\n      Casualty_Home_Area_Type\n      Casualty_IMD_Decile\n    \n  \n  \n    \n      0\n      201501BS70001\n      1.0\n      19.0\n      0.0\n      9.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      7.0\n      3.0\n      5.0\n      1.0\n      0.0\n      0.0\n      2.0\n      0.0\n      NaN\n      NaN\n    \n    \n      1\n      201501BS70002\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      5.0\n      3.0\n      9.0\n      9.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      3.0\n    \n    \n      2\n      201501BS70004\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      2.0\n      0.0\n      0.0\n      0.0\n      ...\n      6.0\n      3.0\n      1.0\n      3.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      6.0\n    \n    \n      3\n      201501BS70005\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      2.0\n      0.0\n      0.0\n      0.0\n      ...\n      2.0\n      3.0\n      5.0\n      1.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      2.0\n    \n    \n      4\n      201501BS70008\n      1.0\n      1.0\n      0.0\n      18.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      8.0\n      2.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      1.0\n      3.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      363238\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      1.0\n      3.0\n      0.0\n      0.0\n      2.0\n      0.0\n      0.0\n      9.0\n      1.0\n      NaN\n    \n    \n      363239\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      5.0\n      3.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      9.0\n      1.0\n      2.0\n    \n    \n      363240\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      4.0\n      3.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      9.0\n      2.0\n      5.0\n    \n    \n      363241\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      6.0\n      3.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      9.0\n      3.0\n      NaN\n    \n    \n      363242\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      4.0\n      3.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      9.0\n      1.0\n      4.0\n    \n  \n\n363243 rows × 67 columns\n\n\n\n\nStructure Investigation\n\ndf_X.shape\n\n(363243, 67)\n\n\n\nimport pandas as pd\npd.value_counts(df_X.dtypes)\n\nfloat64    61\nobject      6\ndtype: int64\n\n\n\n\nStructure of Non Numerical Features\n\n# Display non-numerical features\ndf_X.select_dtypes(exclude=\"number\").head()\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Sex_of_Driver\n      Date\n      Time\n      Local_Authority_(Highway)\n      LSOA_of_Accident_Location\n    \n  \n  \n    \n      0\n      201501BS70001\n      1.0\n      12/01/2015\n      18:45\n      E09000020\n      E01002825\n    \n    \n      1\n      201501BS70002\n      1.0\n      12/01/2015\n      07:50\n      E09000020\n      E01002820\n    \n    \n      2\n      201501BS70004\n      1.0\n      12/01/2015\n      18:08\n      E09000020\n      E01002833\n    \n    \n      3\n      201501BS70005\n      1.0\n      13/01/2015\n      07:40\n      E09000020\n      E01002874\n    \n    \n      4\n      201501BS70008\n      1.0\n      09/01/2015\n      07:30\n      E09000020\n      E01002814\n    \n  \n\n\n\n\n\n# Changes data type of 'Sex_of_Driver'\ndf_X[\"Sex_of_Driver\"] = df_X[\"Sex_of_Driver\"].astype(\"float\")\n\n\ndf_X.describe(exclude=\"number\")\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Date\n      Time\n      Local_Authority_(Highway)\n      LSOA_of_Accident_Location\n    \n  \n  \n    \n      count\n      363243\n      319866\n      319822\n      319866\n      298758\n    \n    \n      unique\n      140056\n      365\n      1439\n      204\n      25979\n    \n    \n      top\n      201543P296025\n      14/02/2015\n      17:30\n      E10000017\n      E01028497\n    \n    \n      freq\n      1332\n      2144\n      2972\n      8457\n      1456\n    \n  \n\n\n\n\n\n\nStructure of Numerical Features\n\n# For each numerical feature compute number of unique entries\nunique_values = df_X.select_dtypes(include=\"number\").nunique().sort_values()\n\n# Plot information with y-axis in log-scale\nunique_values.plot.bar(logy=True, figsize=(15, 4), title=\"Unique values per feature\");\n\n\n\n\n\n\nQuality Investigation\n\n# Check number of duplicates while ignoring the index feature\nn_duplicates = df_X.drop(labels=[\"Accident_Index\"], axis=1).duplicated().sum()\nprint(f\"You seem to have {n_duplicates} duplicates in your database.\")\n\nYou seem to have 22 duplicates in your database.\n\n\n\n#  Extract column names of all features, except 'Accident_Index'\ncolumns_to_consider = df_X.drop(labels=[\"Accident_Index\"], axis=1).columns\n\n# Drop duplicates based on 'columns_to_consider'\ndf_X = df_X.drop_duplicates(subset=columns_to_consider)\ndf_X.shape\n\n(363221, 67)\n\n\n\n\nMissing Values\n\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 8))\nplt.imshow(df_X.isna(), aspect=\"auto\", interpolation=\"nearest\", cmap=\"gray\")\nplt.xlabel(\"Column Number\")\nplt.ylabel(\"Sample Number\");"
  },
  {
    "objectID": "posts/eda.html#how-to-eda",
    "href": "posts/eda.html#how-to-eda",
    "title": "Exploratory Data Analysis",
    "section": "How to EDA ?",
    "text": "How to EDA ?\nStructure Investigation : Exploring shape and as well as data types\nQuality Investigation : To check general quality of datasets in regard to duplicates,missing values and unwanted entries\nContent Investigation : More indepth study of features and how they relate to each other\n\nfrom sklearn.datasets import fetch_openml\n# Download the dataset from openml\ndataset = fetch_openml(data_id=42803, as_frame=True)\n\n# Extract feature matrix X and show 5 random samples\ndf_X = dataset[\"frame\"]\ndf_X\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Vehicle_Reference_df_res\n      Vehicle_Type\n      Towing_and_Articulation\n      Vehicle_Manoeuvre\n      Vehicle_Location-Restricted_Lane\n      Junction_Location\n      Skidding_and_Overturning\n      Hit_Object_in_Carriageway\n      Vehicle_Leaving_Carriageway\n      ...\n      Age_Band_of_Casualty\n      Casualty_Severity\n      Pedestrian_Location\n      Pedestrian_Movement\n      Car_Passenger\n      Bus_or_Coach_Passenger\n      Pedestrian_Road_Maintenance_Worker\n      Casualty_Type\n      Casualty_Home_Area_Type\n      Casualty_IMD_Decile\n    \n  \n  \n    \n      0\n      201501BS70001\n      1.0\n      19.0\n      0.0\n      9.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      7.0\n      3.0\n      5.0\n      1.0\n      0.0\n      0.0\n      2.0\n      0.0\n      NaN\n      NaN\n    \n    \n      1\n      201501BS70002\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      5.0\n      3.0\n      9.0\n      9.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      3.0\n    \n    \n      2\n      201501BS70004\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      2.0\n      0.0\n      0.0\n      0.0\n      ...\n      6.0\n      3.0\n      1.0\n      3.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      6.0\n    \n    \n      3\n      201501BS70005\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      2.0\n      0.0\n      0.0\n      0.0\n      ...\n      2.0\n      3.0\n      5.0\n      1.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      2.0\n    \n    \n      4\n      201501BS70008\n      1.0\n      1.0\n      0.0\n      18.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      8.0\n      2.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      1.0\n      3.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      363238\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      1.0\n      3.0\n      0.0\n      0.0\n      2.0\n      0.0\n      0.0\n      9.0\n      1.0\n      NaN\n    \n    \n      363239\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      5.0\n      3.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      9.0\n      1.0\n      2.0\n    \n    \n      363240\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      4.0\n      3.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      9.0\n      2.0\n      5.0\n    \n    \n      363241\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      6.0\n      3.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      9.0\n      3.0\n      NaN\n    \n    \n      363242\n      2015984141415\n      13.0\n      9.0\n      0.0\n      18.0\n      0.0\n      0.0\n      0.0\n      0.0\n      5.0\n      ...\n      4.0\n      3.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      9.0\n      1.0\n      4.0\n    \n  \n\n363243 rows × 67 columns\n\n\n\n\nStructure Investigation\n\ndf_X.shape\n\n(363243, 67)\n\n\n\nimport pandas as pd\npd.value_counts(df_X.dtypes)\n\nfloat64    61\nobject      6\ndtype: int64\n\n\n\n\nStructure of Non Numerical Features\n\n# Display non-numerical features\ndf_X.select_dtypes(exclude=\"number\").head()\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Sex_of_Driver\n      Date\n      Time\n      Local_Authority_(Highway)\n      LSOA_of_Accident_Location\n    \n  \n  \n    \n      0\n      201501BS70001\n      1.0\n      12/01/2015\n      18:45\n      E09000020\n      E01002825\n    \n    \n      1\n      201501BS70002\n      1.0\n      12/01/2015\n      07:50\n      E09000020\n      E01002820\n    \n    \n      2\n      201501BS70004\n      1.0\n      12/01/2015\n      18:08\n      E09000020\n      E01002833\n    \n    \n      3\n      201501BS70005\n      1.0\n      13/01/2015\n      07:40\n      E09000020\n      E01002874\n    \n    \n      4\n      201501BS70008\n      1.0\n      09/01/2015\n      07:30\n      E09000020\n      E01002814\n    \n  \n\n\n\n\n\n# Changes data type of 'Sex_of_Driver'\ndf_X[\"Sex_of_Driver\"] = df_X[\"Sex_of_Driver\"].astype(\"float\")\n\n\ndf_X.describe(exclude=\"number\")\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Date\n      Time\n      Local_Authority_(Highway)\n      LSOA_of_Accident_Location\n    \n  \n  \n    \n      count\n      363243\n      319866\n      319822\n      319866\n      298758\n    \n    \n      unique\n      140056\n      365\n      1439\n      204\n      25979\n    \n    \n      top\n      201543P296025\n      14/02/2015\n      17:30\n      E10000017\n      E01028497\n    \n    \n      freq\n      1332\n      2144\n      2972\n      8457\n      1456\n    \n  \n\n\n\n\n\n\nStructure of Numerical Features\n\n# For each numerical feature compute number of unique entries\nunique_values = df_X.select_dtypes(include=\"number\").nunique().sort_values()\n\n# Plot information with y-axis in log-scale\nunique_values.plot.bar(logy=True, figsize=(15, 4), title=\"Unique values per feature\");\n\n\n\n\n\n\nQuality Investigation\n\n# Check number of duplicates while ignoring the index feature\nn_duplicates = df_X.drop(labels=[\"Accident_Index\"], axis=1).duplicated().sum()\nprint(f\"You seem to have {n_duplicates} duplicates in your database.\")\n\nYou seem to have 22 duplicates in your database.\n\n\n\n#  Extract column names of all features, except 'Accident_Index'\ncolumns_to_consider = df_X.drop(labels=[\"Accident_Index\"], axis=1).columns\n\n# Drop duplicates based on 'columns_to_consider'\ndf_X = df_X.drop_duplicates(subset=columns_to_consider)\ndf_X.shape\n\n(363221, 67)\n\n\n\n\nMissing Values\n\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 8))\nplt.imshow(df_X.isna(), aspect=\"auto\", interpolation=\"nearest\", cmap=\"gray\")\nplt.xlabel(\"Column Number\")\nplt.ylabel(\"Sample Number\");"
  },
  {
    "objectID": "cv.html#education",
    "href": "cv.html#education",
    "title": "CV",
    "section": "Education",
    "text": "Education\n\nB.Tech in Computer Science and Engineering"
  },
  {
    "objectID": "cv.html#courses",
    "href": "cv.html#courses",
    "title": "CV",
    "section": "Courses",
    "text": "Courses\n\nMachine Learning Course by Andrew NG\nDeep learning Course by Andrew NG\nBig Data Foundation by IBM\nIntroduction to Python by Kaggle"
  },
  {
    "objectID": "posts/regression_loss.html",
    "href": "posts/regression_loss.html",
    "title": "Must know Regression Loss Functions",
    "section": "",
    "text": "Mean Square Error or Quadratic loss or L2 Loss\nMean Absolute Error or L1 Loss\nHuber Loss or Smooth Mean Absolute Error\nLog-Cosh Loss\nQuantile Loss"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Vidyasagar Bhargava",
    "section": "Education",
    "text": "Education\n\nB.Tech in Computer Science and Engineering"
  },
  {
    "objectID": "index.html#work-experience",
    "href": "index.html#work-experience",
    "title": "Vidyasagar Bhargava",
    "section": "Work Experience",
    "text": "Work Experience\n\nTVS Motor - Lead Data Scientist (2021-Present)"
  },
  {
    "objectID": "index.html#work-experience-key-projects",
    "href": "index.html#work-experience-key-projects",
    "title": "Vidyasagar Bhargava",
    "section": "Work Experience & Key Projects",
    "text": "Work Experience & Key Projects\nTVS Motor :- Lead Data Scientist (2021-Present)\n\nPredictive Maintenance\nRange Prediction for Electric Vehicle\n\nWipro Technologies :- Specialist Data Science (2017 - 2021)\n\nChurn Prediction\nNPS Improvement\nScaling Machine Learning model using Spark\nText Summarization using sentence embedding\n\nCognizant Techonology Solution :- Data Scientist (2016 - 2017)\n\nRetail store segmentation\nVideo Analytics\n\nSnapdeal :- Analyst Advanced Analytics (2014 - 2016)\n\nPrice optimization Engine\n\nPrice Elasticity Models\n\nLadyblush E-Commerce Pvt. Ltd (Start up) :- Engineer (2014 - 2014)\n\nE-commerce AI Chatbot\nData Analytics and Dashboarding\n\nShopclues :- Analyst (2013 - 2014)\n\nData Analytics and Dashboarding\n\n\nEducation\n\nB.Tech in Computer Science and Engineering\n\n\n\nCourses\n\nMachine Learning Course by Andrew NG\nDeep learning Course by Andrew NG\nBig Data Foundation by IBM\nIntroduction to Python by Kaggle\n\n\n\nTalks & Webinars\n\nIntroduction to Deep learning at Wipro Technologies on June 2017. [PPT]\n\n\n\nCompetitive Data Science\n\nRank 3rd in Fractal Timeseries Forecasting Hackathon on Analytics Vidhya\nCurrently Kaggle Expert at discussions"
  },
  {
    "objectID": "photos.html",
    "href": "photos.html",
    "title": "Activities in London",
    "section": "",
    "text": "I attended amazing lecture series on deep learning by Deep Mind in early 2020 at UCL London."
  },
  {
    "objectID": "photos.html#ai-core-at-imperial-college-london",
    "href": "photos.html#ai-core-at-imperial-college-london",
    "title": "Me",
    "section": "AI Core at Imperial College London",
    "text": "AI Core at Imperial College London"
  },
  {
    "objectID": "photos.html#lecture-series-by-ai-core-on-machine-learning-by-imperial-college-london",
    "href": "photos.html#lecture-series-by-ai-core-on-machine-learning-by-imperial-college-london",
    "title": "Me",
    "section": "Lecture Series by AI Core on Machine Learning by Imperial College London",
    "text": "Lecture Series by AI Core on Machine Learning by Imperial College London"
  },
  {
    "objectID": "photos.html#ai-core-machine-learning-at-imperial-college-london",
    "href": "photos.html#ai-core-machine-learning-at-imperial-college-london",
    "title": "Me",
    "section": "AI Core Machine Learning at Imperial College London",
    "text": "AI Core Machine Learning at Imperial College London"
  },
  {
    "objectID": "photos.html#daily-free-newspaper-in-evening-in-outside-tube",
    "href": "photos.html#daily-free-newspaper-in-evening-in-outside-tube",
    "title": "Me",
    "section": "Daily Free Newspaper in evening in outside Tube",
    "text": "Daily Free Newspaper in evening in outside Tube"
  },
  {
    "objectID": "photos.html#free-evening-newspaper-outside-tube",
    "href": "photos.html#free-evening-newspaper-outside-tube",
    "title": "Me",
    "section": "Free Evening Newspaper outside Tube",
    "text": "Free Evening Newspaper outside Tube"
  },
  {
    "objectID": "photos.html#machine-learning-at-imperial-college-london",
    "href": "photos.html#machine-learning-at-imperial-college-london",
    "title": "Activities in London",
    "section": "Machine Learning at Imperial College London",
    "text": "Machine Learning at Imperial College London\nI attended few ml and nlp classes conducted by AI Core at Imperial College."
  },
  {
    "objectID": "photos.html#at-london",
    "href": "photos.html#at-london",
    "title": "Me",
    "section": "At London",
    "text": "At London"
  },
  {
    "objectID": "photos.html#somewhere-in-london",
    "href": "photos.html#somewhere-in-london",
    "title": "Activities in London",
    "section": "Somewhere in London",
    "text": "Somewhere in London"
  },
  {
    "objectID": "photos.html#london-eye-in-night",
    "href": "photos.html#london-eye-in-night",
    "title": "Me",
    "section": "London Eye in Night",
    "text": "London Eye in Night"
  },
  {
    "objectID": "photos.html#london-eye-at-night",
    "href": "photos.html#london-eye-at-night",
    "title": "Me",
    "section": "London Eye at Night",
    "text": "London Eye at Night"
  },
  {
    "objectID": "photos.html#r-conference-by-max-kuhn",
    "href": "photos.html#r-conference-by-max-kuhn",
    "title": "Activities in London",
    "section": "R-Conference by Max Kuhn",
    "text": "R-Conference by Max Kuhn\nOn 20th Nov 2019 I got the chance to attend live conference by Max Kuhn the developer famous R packages like Caret & tidymodels."
  },
  {
    "objectID": "photos.html#at-the-gym-group",
    "href": "photos.html#at-the-gym-group",
    "title": "Me",
    "section": "At The gym group",
    "text": "At The gym group\nI joined a The gym group in london for fitness."
  },
  {
    "objectID": "photos.html#london-eye-at-day-time",
    "href": "photos.html#london-eye-at-day-time",
    "title": "Me",
    "section": "London Eye at Day time",
    "text": "London Eye at Day time"
  },
  {
    "objectID": "photos.html#london-eye",
    "href": "photos.html#london-eye",
    "title": "Activities in London",
    "section": "London Eye",
    "text": "London Eye\nI like this place"
  },
  {
    "objectID": "photos.html#london-bridge",
    "href": "photos.html#london-bridge",
    "title": "Activities in London",
    "section": "London Bridge",
    "text": "London Bridge\nMandatory London Bridge Picture"
  },
  {
    "objectID": "photos.html#cricket-at-canary-wharf",
    "href": "photos.html#cricket-at-canary-wharf",
    "title": "Activities in London",
    "section": "Cricket at Canary Wharf",
    "text": "Cricket at Canary Wharf\nWatching cricket here during office lunch break was fun."
  },
  {
    "objectID": "london.html",
    "href": "london.html",
    "title": "Activities in London",
    "section": "",
    "text": "My short stay at London before pandemic hit the world and I had to come back to India."
  },
  {
    "objectID": "london.html#machine-learning-at-imperial-college-london",
    "href": "london.html#machine-learning-at-imperial-college-london",
    "title": "Activities in London",
    "section": "Machine Learning at Imperial College London",
    "text": "Machine Learning at Imperial College London\nAttended few ml and nlp classes conducted by AI Core at Imperial College."
  },
  {
    "objectID": "london.html#r-conference-by-max-kuhn",
    "href": "london.html#r-conference-by-max-kuhn",
    "title": "Activities in London",
    "section": "R-Conference by Max Kuhn",
    "text": "R-Conference by Max Kuhn\nGot the chance to attend live conference by Max Kuhn the developer famous R packages like Caret & tidymodels."
  },
  {
    "objectID": "london.html#somewhere-in-london",
    "href": "london.html#somewhere-in-london",
    "title": "Activities in London",
    "section": "Somewhere in London",
    "text": "Somewhere in London"
  },
  {
    "objectID": "london.html#london-eye",
    "href": "london.html#london-eye",
    "title": "Activities in London",
    "section": "London Eye",
    "text": "London Eye"
  },
  {
    "objectID": "london.html#london-bridge",
    "href": "london.html#london-bridge",
    "title": "Activities in London",
    "section": "London Bridge",
    "text": "London Bridge\nA Mandatory London Bridge Picture"
  },
  {
    "objectID": "london.html#cricket-at-canary-wharf",
    "href": "london.html#cricket-at-canary-wharf",
    "title": "Activities in London",
    "section": "Cricket at Canary Wharf",
    "text": "Cricket at Canary Wharf\nWatching cricket here during office breaks was fun."
  },
  {
    "objectID": "london.html#ucl-x-deepmind-lecture-series",
    "href": "london.html#ucl-x-deepmind-lecture-series",
    "title": "Activities in London",
    "section": "UCL x DeepMind Lecture Series",
    "text": "UCL x DeepMind Lecture Series\nAttended amazing lecture series on deep learning by Deep Mind in early 2020 at UCL London."
  },
  {
    "objectID": "posts/mlprojects.html",
    "href": "posts/mlprojects.html",
    "title": "Successful delivering of Machine Learning Projects",
    "section": "",
    "text": "1. Easy access to required data and a comprehensive data strategy\nThere is saying in computer science world “garbage in, garbage out” which means nonsense input data produces nonsense output. Therefore your machine learning model is only as good as the data it’s trained on.If there is problem with data, machine learning scientists will end up spending their time in doing data cleanup and management.So we need a strong data strategy to make efficient use of ML scientist’s time and talent.\nWhat makes a strong data strategy ?\n\nData should be viewed as organizational asset rather than property of individual department that created or collected that data.\nData should be available easily, securely and in compliance with legal and regulatory requirements.\nData is put to work through analytics and machine learning to make better decisions, create efficiencies and drive new innovations.\n\nData related questions to be asked before the start of ML project\n\nWhat data is available to me today?\nWhat data is not quite available, but with some effort could become available?\nWhat data I don’t have today, but I might have in next few months or year? And what steps can be taken to begin gathering that data?\nIs there any potential bias in data or data sources?\n\n\n\n2. Selecting machine learning use cases and setting success metrics\nWe should aim to use machine learning where it is actually needed and not where it might be interesting. Some times simple analytics or rules get you 10-40% of business impact.Things to keep in mind include data readiness, business impact and machine learning applicability.\n\nA high impact use case without data or machine learing applicability ❌\nA use case with lots of data and high machine learning applicability but low business impact ❌\n\nBefore working on a project the team needs estimate its potential impact as well (Opportunity Sizing). So once we define business problem which can be solved with machine learning and done with opportunity sizing the next step is to outlining clear metrics to measure success.\nThe data science projects needs to have clear goal which is typically a target value for a clearly defined metric. In real world data science projects there are not just one but multiple metrics that model will evaluated against. Some of these evaluation metric won’t even be related to how your prediction performs against the ground truth. Other such metrics are like :\n\nOverall memory usage\nlatency of the prediction process\ncomplexity of predictive model\n\nReal world problems are indeed dominated by business and tech infrastructure concerns.\n\n\n3. Technical experts and domain experts should work together\nWe need to make sure that domain experts and technical experts or stakeholders work side by side. If relevant stakeholders are the part of entire process, everyone is most likely to accept, adopt and implement the solution. If a data scientist is working in silos then its very much unlikely that their models get implemented.\n\n\n4. Exploratory data analysis\nBefore building the model,we need to interrogate the data to see if there is any predictive power in the feature set. Read more about EDA here.\n\n\n5. A quick MVP\nIts good practice to build a minimum viable product which is build quickly and cheaply to validate the hypothesis before we commit extensive time and resource.\n\n\n6. Experiment Metrics\nWe should look for more than one metric to look when an experiment concludes.\n\n\n7. Regular Check-ins\nRather than meeting at the start and end of a model build, it is better to check-in frequently (e.g. once or twice a week) to discuss latest findings and align on if any course corrections are necessary."
  },
  {
    "objectID": "cv.html#getting-up",
    "href": "cv.html#getting-up",
    "title": "Habits",
    "section": "Getting up",
    "text": "Getting up\n\nTurn off alarm\nGet out of bed"
  },
  {
    "objectID": "cv.html#going-to-sleep",
    "href": "cv.html#going-to-sleep",
    "title": "Habits",
    "section": "Going to sleep",
    "text": "Going to sleep\n\nGet in bed\nCount sheep"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects & Clients",
    "section": "",
    "text": "Built models for predictive maintenace of different parts of NTORQ vehicle\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuilt predictive model for predicting churning customer in next month\n\n\n\nGTA\n\n\nJun 6, 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuilt a regression model for range prediction for electric bike.\n\n\n\nTVS Motor\n\n\nJun 6, 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing Random forest model provided recommendation for NPS improvement\n\n\n\nHewlett packard\n\n\nJun 6, 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPerformed benchmarking of Xeon processor for NLP task using distributed deep learning.\n\n\n\nIntel\n\n\nJun 6, 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorked on SAS scripts to be migrated on python using best coding practices\n\n\n\nHSBC\n\n\nJun 6, 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuilt a price optimization for e-commerce company for automate price based on demand and supply curves.\n\n\n\nSnapdeal\n\n\nJun 6, 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuilt an predictive model for freight charges for different carriers.\n\n\n\nComcast\n\n\nJun 6, 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPerformed customer segmentation using K-Mean technique\n\n\n\nPepsico\n\n\nJun 6, 2015\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/predictive_maintenance.html",
    "href": "projects/predictive_maintenance.html",
    "title": "Predictive Maintenance for NTORQ",
    "section": "",
    "text": "Tools : python\nMachine learning : Regression\nRole : Lead Data Scientist\nStatus : In progress"
  },
  {
    "objectID": "posts/is-person-happy-or-sad.html",
    "href": "posts/is-person-happy-or-sad.html",
    "title": "Nearest Neighbour Classifier",
    "section": "",
    "text": "#NB: Kaggle requires phone verification to use the internet or a GPU. If you haven't done that yet, the cell below will fail\n#    This code is only here to check that your internet is enabled. It doesn't do anything else.\n#    Here's a help thread on getting your phone number verified: https://www.kaggle.com/product-feedback/135367\nimport socket,warnings\ntry:\n    socket.setdefaulttimeout(1)\n    socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect(('1.1.1.1', 53))\nexcept socket.error as ex: raise Exception(\"STOP: No internet. Click '>|' in top right and set 'Internet' switch to on\")\n\n::: {.cell _kg_hide-input=‘true’ _kg_hide-output=‘true’ execution=‘{“iopub.execute_input”:“2022-07-25T16:09:27.991401Z”,“iopub.status.busy”:“2022-07-25T16:09:27.990634Z”,“iopub.status.idle”:“2022-07-25T16:09:35.755984Z”,“shell.execute_reply”:“2022-07-25T16:09:35.755076Z”,“shell.execute_reply.started”:“2022-07-25T16:09:27.991361Z”}’ execution_count=29}\n# It's a good idea to ensure you're running the latest version of any libraries you need.\n# `!pip install -Uqq <libraries>` upgrades to the latest version of <libraries>\n# NB: You can safely ignore any warnings or errors pip spits out about running as root or incompatibilities\nimport os\niskaggle = os.environ.get('KAGGLE_KERNEL_RUN_TYPE', '')\n\nif iskaggle:\n    !pip install -Uqq fastai\n:::\nIn 2015 the idea of creating a computer system that could recognise birds was considered so outrageously challenging that it was the basis of this XKCD joke:\n\n\n\nimage.png\n\n\nBut today, we can do exactly that, in just a few minutes, using entirely free resources!\nThe basic steps we’ll take are:\n\nUse DuckDuckGo to search for images of “bird photos”\nUse DuckDuckGo to search for images of “forest photos”\nFine-tune a pretrained neural network to recognise these two groups\nTry running this model on a picture of a bird and see if it works."
  },
  {
    "objectID": "posts/is-person-happy-or-sad.html#step-1-download-images-of-birds-and-non-birds",
    "href": "posts/is-person-happy-or-sad.html#step-1-download-images-of-birds-and-non-birds",
    "title": "Nearest Neighbour Classifier",
    "section": "Step 1: Download images of birds and non-birds",
    "text": "Step 1: Download images of birds and non-birds\n::: {.cell _kg_hide-input=‘true’ execution=‘{“iopub.execute_input”:“2022-07-25T16:09:47.683343Z”,“iopub.status.busy”:“2022-07-25T16:09:47.683121Z”,“iopub.status.idle”:“2022-07-25T16:09:47.694420Z”,“shell.execute_reply”:“2022-07-25T16:09:47.693634Z”,“shell.execute_reply.started”:“2022-07-25T16:09:47.683314Z”}’ execution_count=31}\nfrom fastcore.all import *\nimport time\n\ndef search_images(term, max_images=200):\n    url = 'https://duckduckgo.com/'\n    res = urlread(url,data={'q':term})\n    searchObj = re.search(r'vqd=([\\d-]+)\\&', res)\n    requestUrl = url + 'i.js'\n    params = dict(l='us-en', o='json', q=term, vqd=searchObj.group(1), f=',,,', p='1', v7exp='a')\n    urls,data = set(),{'next':1}\n    while len(urls)<max_images and 'next' in data:\n        data = urljson(requestUrl,data=params)\n        urls.update(L(data['results']).itemgot('image'))\n        requestUrl = url + data['next']\n        time.sleep(0.2)\n    return L(urls)[:max_images]\n:::\nLet’s start by searching for a happy person photo and seeing what kind of result we get. We’ll start by getting URLs from a search:\n\nurls = search_images('happy human face', max_images=2)\nurls[0]\n\n…and then download a URL and take a look at it:\n\nfrom fastdownload import download_url\ndest = 'happy.jpg'\ndownload_url(urls[0], dest, show_progress=False)\n\nfrom fastai.vision.all import *\nim = Image.open(dest)\nim.to_thumb(256,256)\n\nNow let’s do the same with “forest photos”:\n\ndownload_url(search_images('sad human face', max_images=1)[0], 'sad.jpg', show_progress=False)\nImage.open('sad.jpg').to_thumb(256,256)\n\nOur searches seem to be giving reasonable results, so let’s grab 200 examples of each of “happy” and “sad” photos, and save each group of photos to a different folder:\n\nsearches = 'happy human face','sad human face'\npath = Path('happy_or_not')\n\nfor o in searches:\n    dest = (path/o)\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'{o} photo'))\n    resize_images(path/o, max_size=400, dest=path/o)"
  },
  {
    "objectID": "posts/is-person-happy-or-sad.html#step-2-train-our-model",
    "href": "posts/is-person-happy-or-sad.html#step-2-train-our-model",
    "title": "Nearest Neighbour Classifier",
    "section": "Step 2: Train our model",
    "text": "Step 2: Train our model\nSome photos might not download correctly which could cause our model training to fail, so we’ll remove them:\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\nTo train a model, we’ll need DataLoaders, which is an object that contains a training set (the images used to create a model) and a validation set (the images used to check the accuracy of a model – not used during training). In fastai we can create that easily using a DataBlock, and view sample images from it:\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), \n    get_items=get_image_files, \n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path)\n\ndls.show_batch(max_n=6)\n\nHere what each of the DataBlock parameters means:\nblocks=(ImageBlock, CategoryBlock),\nThe inputs to our model are images, and the outputs are categories (in this case, “happy” or “sad”).\nget_items=get_image_files, \nTo find all the inputs to our model, run the get_image_files function (which returns a list of all image files in a path).\nsplitter=RandomSplitter(valid_pct=0.2, seed=42),\nSplit the data into training and validation sets randomly, using 20% of the data for the validation set.\nget_y=parent_label,\nThe labels (y values) is the name of the parent of each file (i.e. the name of the folder they’re in, which will be bird or forest).\nitem_tfms=[Resize(192, method='squish')]\nBefore training, resize each image to 192x192 pixels by “squishing” it (as opposed to cropping it).\nNow we’re ready to train our model. The fastest widely used computer vision model is resnet18. You can train this in a few minutes, even on a CPU! (On a GPU, it generally takes under 10 seconds…)\nfastai comes with a helpful fine_tune() method which automatically uses best practices for fine tuning a pre-trained model, so we’ll use that.\n\nlearn = cnn_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(6)\n\nGenerally when I run this I see 100% accuracy on the validation set (although it might vary a bit from run to run).\n“Fine-tuning” a model means that we’re starting with a model someone else has trained using some other dataset (called the pretrained model), and adjusting the weights a little bit so that the model learns to recognise your particular dataset. In this case, the pretrained model was trained to recognise photos in imagenet, and widely-used computer vision dataset with images covering 1000 categories) For details on fine-tuning and why it’s important, check out the free fast.ai course."
  },
  {
    "objectID": "posts/is-person-happy-or-sad.html#step-3-use-our-model-and-build-your-own",
    "href": "posts/is-person-happy-or-sad.html#step-3-use-our-model-and-build-your-own",
    "title": "Nearest Neighbour Classifier",
    "section": "Step 3: Use our model (and build your own!)",
    "text": "Step 3: Use our model (and build your own!)\nLet’s see what our model thinks about that bird we downloaded at the start:\n\nis_happy,_,probs = learn.predict(PILImage.create('sad.jpg'))\nprint(f\"This is a: {is_happy}.\")\nprint(f\"Probability it's a happy: {probs[0]:.4f}\")\n\nGood job, resnet18. :)\nSo, as you see, in the space of a few years, creating computer vision classification models has gone from “so hard it’s a joke” to “trivially easy and free”!\nIt’s not just in computer vision. Thanks to deep learning, computers can now do many things which seemed impossible just a few years ago, including creating amazing artworks, and explaining jokes. It’s moving so fast that even experts in the field have trouble predicting how it’s going to impact society in the coming years.\nOne thing is clear – it’s important that we all do our best to understand this technology, because otherwise we’ll get left behind!\nNow it’s your turn. Click “Copy & Edit” and try creating your own image classifier using your own image searches!\nIf you enjoyed this, please consider clicking the “upvote” button in the top-right – it’s very encouraging to us notebook authors to know when people appreciate our work."
  },
  {
    "objectID": "posts/interactive.html",
    "href": "posts/interactive.html",
    "title": "Interactive Visualization",
    "section": "",
    "text": "Code\ncars = sns.load_dataset('mpg')\n\ndef bandwidth_widget(bw=0.20):\n    sns.kdeplot(cars.horsepower, lw=3, fill=True, bw_adjust=bw)\n    plt.xlim(-30, 300)\n    plt.ylim(0, 0.03);\n\n\n\n\nCode\nwidgets.interact(bandwidth_widget, bw=(.1, 3));\n\n\n\n\n\n\n\nCode\nwidgets.IntSlider()\n\n\n\n\n\n\n\nCode\nimport numpy as np\nx = np.random.uniform(0, 5, size=100)\nep = np.random.normal(size=100)\n\ny = 2*x + ep\n\n\n\n\nCode\nplt.scatter(x, y);\n\n\n\n\n\n\n\nCode\nx_values = np.linspace(0, 5, 1000)\n\n\n\n\nCode\ndef slope_viz(m=1):\n    plt.scatter(x, y)\n    plt.plot(x_values, m*x_values, lw=3, color='black')\n    \n    plt.ylim(-1.2, 12.2);\n\n\n\n\nCode\nslope_viz(m=3)\n\n\n\n\n\n\n\nCode\nwidgets.interact(slope_viz, m=(0.2, 5, 0.2))\n\n\n\n\n\n<function __main__.slope_viz(m=1)>\n\n\n\n\nCode\nfrom ipyleaflet import Map, Marker, basemaps, basemap_to_tiles\nm = Map(\n  basemap=basemap_to_tiles(\n    basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"\n  ),\n  center=(52.204793, 360.121558),\n  zoom=4\n)\nm.add_layer(Marker(location=(52.204793, 360.121558)))\nm\n\n\n\n\n\n\n\n\nCode\nimport plotly.express as px\nimport plotly.io as pio\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", \n                 color=\"species\", \n                 marginal_y=\"violin\", marginal_x=\"box\", \n                 trendline=\"ols\", template=\"simple_white\")\nfig.show()"
  },
  {
    "objectID": "posts/interactivity.html",
    "href": "posts/interactivity.html",
    "title": "",
    "section": "",
    "text": "The example above doesn’t plot all of the data but rather a filtered subset. To create our filter we’ll need some inputs, and we’ll want to be able to use the values of these inputs in our filtering function. To do this, we use the viewof keyword and with some standard Inputs:\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)"
  },
  {
    "objectID": "myblog/posts/post-with-code/index.html",
    "href": "myblog/posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "myblog/posts/welcome/index.html",
    "href": "myblog/posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "myblog/index.html",
    "href": "myblog/index.html",
    "title": "Blog",
    "section": "",
    "text": "A generalization of the F-measure that adds a configuration parameter called beta\n\n\n\n\n\n\nJun 10, 2022\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nNearest neighbor classifiers are defined by their characteristic of classifying unlabeled examples by assigning them the class of similar labeled examples.\n\n\n\n\n\n\nJun 8, 2022\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nPrinciples and process for democratizing ML projects\n\n\n\n\n\n\nJul 13, 2019\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nA way of summarizing, interpreting and visualizing the information hidden in rows and column format.\n\n\n\n\n\n\nJun 11, 2019\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "myblog/about.html",
    "href": "myblog/about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "myblog/posts/Fbeta-Measure/index.html",
    "href": "myblog/posts/Fbeta-Measure/index.html",
    "title": "Fbeta-Measure",
    "section": "",
    "text": "\\[\nF_{1}=2.\\frac{{precision} \\times {recall}}{{precision} + {recall}}\n\\]\nThe Fbeta-measure is a generalization of the F-measure that adds a configuration parameter called beta. A default beta value is 1.0, which is the same as the F-measure. A smaller beta value, such as 0.5, gives more weight to precision and less to recall, whereas a larger beta value, such as 2.0, gives less weight to precision and more weight to recall in the calculation of the score.\n\n\n\\[\nF_{{\\beta}} = \\frac{(1 + {\\beta}^2). (precision.recall)}{({\\beta}^2.precision+recall)}\n\\]\nSummary\n\nPrecision and recall provide two ways to summarize the errors made for the positive class in a binary classification problem.\n\nF-measure provides a single score that summarizes the precision and recall.\n\nFbeta-measure provides a configurable version of the F-measure to give more or less attention to the precision and recall measure when calculating a single score."
  },
  {
    "objectID": "myblog/posts/Nearest-Neighbour-Classifier/index.html#strength",
    "href": "myblog/posts/Nearest-Neighbour-Classifier/index.html#strength",
    "title": "Nearest Neighbour Classifier",
    "section": "Strength",
    "text": "Strength\n\nSimple and effective\nMakes no assumption about data\nFast Training Process"
  },
  {
    "objectID": "myblog/posts/Nearest-Neighbour-Classifier/index.html#weakness",
    "href": "myblog/posts/Nearest-Neighbour-Classifier/index.html#weakness",
    "title": "Nearest Neighbour Classifier",
    "section": "Weakness",
    "text": "Weakness\n\nDoesn’t produce model, limiting the ability to understand how features are related to class\nRequires selection of k\nSlow classification phase\nCategorical features and missing data require pre processing\n\nThe k-Nearest Neighbor algorithm uses nearest k number of neighbors for labeling of an unlabeled example. The unlabeled test example is assigned the class of majority of the k-Nearest Neighbors.\nFor finding the distance k-NN algorithm uses Euclidean distance."
  },
  {
    "objectID": "myblog/posts/Nearest-Neighbour-Classifier/index.html#defining-the-dataset",
    "href": "myblog/posts/Nearest-Neighbour-Classifier/index.html#defining-the-dataset",
    "title": "Nearest Neighbour Classifier",
    "section": "Defining the dataset",
    "text": "Defining the dataset\n\n# First Feature\nweather=['Sunny','Sunny','Overcast','Rainy','Rainy','Rainy','Overcast','Sunny','Sunny',\n'Rainy','Sunny','Overcast','Overcast','Rainy']\n# Second Feature\ntemp=['Hot','Hot','Hot','Mild','Cool','Cool','Cool','Mild','Cool','Mild','Mild','Mild','Hot','Mild']\n\n# Label or target varible\nplay=['No','No','Yes','Yes','Yes','No','Yes','No','Yes','Yes','Yes','Yes','Yes','No']\n\nWe have two features weather and temperature and one label play."
  },
  {
    "objectID": "myblog/posts/Nearest-Neighbour-Classifier/index.html#encoding-data-columns",
    "href": "myblog/posts/Nearest-Neighbour-Classifier/index.html#encoding-data-columns",
    "title": "Nearest Neighbour Classifier",
    "section": "Encoding data columns",
    "text": "Encoding data columns\n\nfrom sklearn import preprocessing\n\n#creating labelEncoder\nle = preprocessing.LabelEncoder()\n\n# Converting string labels into numbers.\nweather_encoded=le.fit_transform(weather)\n\nSimilarly, you can encode temperature and label into numeric columns.\n\n# converting string labels into numbers\ntemp_encoded=le.fit_transform(temp)\nlabel=le.fit_transform(play)"
  },
  {
    "objectID": "myblog/posts/Nearest-Neighbour-Classifier/index.html#combining-features",
    "href": "myblog/posts/Nearest-Neighbour-Classifier/index.html#combining-features",
    "title": "Nearest Neighbour Classifier",
    "section": "Combining Features",
    "text": "Combining Features\n\n#combinig weather and temp into single listof tuples\nfeatures=list(zip(weather_encoded,temp_encoded))"
  },
  {
    "objectID": "myblog/posts/Nearest-Neighbour-Classifier/index.html#generating-models",
    "href": "myblog/posts/Nearest-Neighbour-Classifier/index.html#generating-models",
    "title": "Nearest Neighbour Classifier",
    "section": "Generating Models",
    "text": "Generating Models\n\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier(n_neighbors=3)\n\n# Train the model using the training sets\nmodel.fit(features,label)\n\nKNeighborsClassifier(n_neighbors=3)"
  },
  {
    "objectID": "myblog/posts/Nearest-Neighbour-Classifier/index.html#predict-output",
    "href": "myblog/posts/Nearest-Neighbour-Classifier/index.html#predict-output",
    "title": "Nearest Neighbour Classifier",
    "section": "Predict Output",
    "text": "Predict Output\n\npredicted= model.predict([[0,2]]) # 0:Overcast, 2:Mild\nprint(predicted)\n\n[1]"
  },
  {
    "objectID": "myblog/posts/Successful-delivering-of-machine-learning-models/index.html",
    "href": "myblog/posts/Successful-delivering-of-machine-learning-models/index.html",
    "title": "Successful delivering of Machine Learning Projects",
    "section": "",
    "text": "1. Easy access to required data and a comprehensive data strategy\nThere is saying in computer science world “garbage in, garbage out” which means nonsense input data produces nonsense output. Therefore your machine learning model is only as good as the data it’s trained on.If there is problem with data, machine learning scientists will end up spending their time in doing data cleanup and management.So we need a strong data strategy to make efficient use of ML scientist’s time and talent.\nWhat makes a strong data strategy ?\n\nData should be viewed as organizational asset rather than property of individual department that created or collected that data.\nData should be available easily, securely and in compliance with legal and regulatory requirements.\nData is put to work through analytics and machine learning to make better decisions, create efficiencies and drive new innovations.\n\nData related questions to be asked before the start of ML project\n\nWhat data is available to me today?\nWhat data is not quite available, but with some effort could become available?\nWhat data I don’t have today, but I might have in next few months or year? And what steps can be taken to begin gathering that data?\nIs there any potential bias in data or data sources?\n\n\n\n2. Selecting machine learning use cases and setting success metrics\nWe should aim to use machine learning where it is actually needed and not where it might be interesting. Some times simple analytics or rules get you 10-40% of business impact.Things to keep in mind include data readiness, business impact and machine learning applicability.\n\nA high impact use case without data or machine learing applicability ❌\nA use case with lots of data and high machine learning applicability but low business impact ❌\n\nBefore working on a project the team needs estimate its potential impact as well (Opportunity Sizing). So once we define business problem which can be solved with machine learning and done with opportunity sizing the next step is to outlining clear metrics to measure success.\nThe data science projects needs to have clear goal which is typically a target value for a clearly defined metric. In real world data science projects there are not just one but multiple metrics that model will evaluated against. Some of these evaluation metric won’t even be related to how your prediction performs against the ground truth. Other such metrics are like :\n\nOverall memory usage\nlatency of the prediction process\ncomplexity of predictive model\n\nReal world problems are indeed dominated by business and tech infrastructure concerns.\n\n\n3. Technical experts and domain experts should work together\nWe need to make sure that domain experts and technical experts or stakeholders work side by side. If relevant stakeholders are the part of entire process, everyone is most likely to accept, adopt and implement the solution. If a data scientist is working in silos then its very much unlikely that their models get implemented.\n\n\n4. Exploratory data analysis\nBefore building the model,we need to interrogate the data to see if there is any predictive power in the feature set. Read more about EDA here.\n\n\n5. A quick MVP\nIts good practice to build a minimum viable product which is build quickly and cheaply to validate the hypothesis before we commit extensive time and resource.\n\n\n6. Experiment Metrics\nWe should look for more than one metric to look when an experiment concludes.\n\n\n7. Regular Check-ins\nRather than meeting at the start and end of a model build, it is better to check-in frequently (e.g. once or twice a week) to discuss latest findings and align on if any course corrections are necessary."
  },
  {
    "objectID": "myblog/posts/Exploratory-Data-Analysis/index.html",
    "href": "myblog/posts/Exploratory-Data-Analysis/index.html",
    "title": "The Google’s Guide to Exploratory Data Analysis",
    "section": "",
    "text": "How to EDA ?\nAs a data scientist we need to do comprehensive exploration of the dataset and gain deep understanding of data. I divide exploratory data analysis in 3 parts of investigation.\n\nStructure of data : Exploring shape and as well as data types.\n1.1 Structure of non numerical features\n1.2 Structure of numerical features\n1.3 Conclusion of structure investigation\nQuality of data : To check general quality of datasets in regard to duplicates,missing values and unwanted entries.\n2.1 Duplicates\n2.2 Missing Values\n2.2.1 Per sample\n2.2.2 Per feature\n2.3 Unwanted Entries and Recording Errors\n2.3.1 Numerical features\n2.3.2 Non Numerical features\n2.4 Conclusion of Quality Investigation\nContent Investigation & Predictive Power : More indepth study of features and how they relate to each other.\n3.1 Feature distribution\n3.2 Feature patterns\n3.2.1 Continuos feature\n3.2.2 Discreet and ordinal feature\n3.3 Feature relantionship\n\n\n\nExample Case\nLet’s download some data and perform eda to bring insights as well know quality of the data.\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.datasets import fetch_openml\n\n\n# Download the dataset from openml\ndataset = fetch_openml(data_id=42803, as_frame=True)\n\n# Extract feature matrix X and show 5 random samples\ndf_X = dataset[\"frame\"]\ndf_X.head(5)\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Vehicle_Reference_df_res\n      Vehicle_Type\n      Towing_and_Articulation\n      Vehicle_Manoeuvre\n      Vehicle_Location-Restricted_Lane\n      Junction_Location\n      Skidding_and_Overturning\n      Hit_Object_in_Carriageway\n      Vehicle_Leaving_Carriageway\n      ...\n      Age_Band_of_Casualty\n      Casualty_Severity\n      Pedestrian_Location\n      Pedestrian_Movement\n      Car_Passenger\n      Bus_or_Coach_Passenger\n      Pedestrian_Road_Maintenance_Worker\n      Casualty_Type\n      Casualty_Home_Area_Type\n      Casualty_IMD_Decile\n    \n  \n  \n    \n      0\n      201501BS70001\n      1.0\n      19.0\n      0.0\n      9.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      7.0\n      3.0\n      5.0\n      1.0\n      0.0\n      0.0\n      2.0\n      0.0\n      NaN\n      NaN\n    \n    \n      1\n      201501BS70002\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      5.0\n      3.0\n      9.0\n      9.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      3.0\n    \n    \n      2\n      201501BS70004\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      2.0\n      0.0\n      0.0\n      0.0\n      ...\n      6.0\n      3.0\n      1.0\n      3.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      6.0\n    \n    \n      3\n      201501BS70005\n      1.0\n      9.0\n      0.0\n      9.0\n      0.0\n      2.0\n      0.0\n      0.0\n      0.0\n      ...\n      2.0\n      3.0\n      5.0\n      1.0\n      0.0\n      0.0\n      2.0\n      0.0\n      1.0\n      2.0\n    \n    \n      4\n      201501BS70008\n      1.0\n      1.0\n      0.0\n      18.0\n      0.0\n      8.0\n      0.0\n      0.0\n      0.0\n      ...\n      8.0\n      2.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      1.0\n      3.0\n    \n  \n\n5 rows × 67 columns\n\n\n\n\n\nStructure Investigation\n\ndf_X.shape\n\n(363243, 67)\n\n\n\nimport pandas as pd\npd.value_counts(df_X.dtypes)\n\nfloat64    61\nobject      6\ndtype: int64\n\n\n\n\nStructure of Non Numerical Features\n\n# Display non-numerical features\ndf_X.select_dtypes(exclude=\"number\").head()\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Sex_of_Driver\n      Date\n      Time\n      Local_Authority_(Highway)\n      LSOA_of_Accident_Location\n    \n  \n  \n    \n      0\n      201501BS70001\n      1.0\n      12/01/2015\n      18:45\n      E09000020\n      E01002825\n    \n    \n      1\n      201501BS70002\n      1.0\n      12/01/2015\n      07:50\n      E09000020\n      E01002820\n    \n    \n      2\n      201501BS70004\n      1.0\n      12/01/2015\n      18:08\n      E09000020\n      E01002833\n    \n    \n      3\n      201501BS70005\n      1.0\n      13/01/2015\n      07:40\n      E09000020\n      E01002874\n    \n    \n      4\n      201501BS70008\n      1.0\n      09/01/2015\n      07:30\n      E09000020\n      E01002814\n    \n  \n\n\n\n\n\n# Changes data type of 'Sex_of_Driver'\ndf_X[\"Sex_of_Driver\"] = df_X[\"Sex_of_Driver\"].astype(\"float\")\n\n\ndf_X.describe(exclude=\"number\")\n\n\n\n\n\n  \n    \n      \n      Accident_Index\n      Date\n      Time\n      Local_Authority_(Highway)\n      LSOA_of_Accident_Location\n    \n  \n  \n    \n      count\n      363243\n      319866\n      319822\n      319866\n      298758\n    \n    \n      unique\n      140056\n      365\n      1439\n      204\n      25979\n    \n    \n      top\n      201543P296025\n      14/02/2015\n      17:30\n      E10000017\n      E01028497\n    \n    \n      freq\n      1332\n      2144\n      2972\n      8457\n      1456\n    \n  \n\n\n\n\n\n\nStructure of Numerical Features\n\n# from matplotlib.offsetbox import AnnotationBbox, OffsetImage\n# import matplotlib.image as mpimg\n# def insert_image(path, zoom, xybox, ax):\n#     '''Insert an image within matplotlib'''\n#     imagebox = OffsetImage(mpimg.imread(path), zoom=zoom)\n#     ab = AnnotationBbox(imagebox, xy=(0.5, 0.7), frameon=False, pad=1, xybox=xybox)\n#     ax.add_artist(ab)\n\n\n\n# For each numerical feature compute number of unique entries\nsns.set(rc={'axes.facecolor':'#e6ddde', 'figure.facecolor':'#e6ddde'})\n\nfig, ax = plt.subplots(figsize=(10, 8))\n\nunique_values = df_X.select_dtypes(include=\"number\").nunique().sort_values()\n\n# Plot information with y-axis in log-scale\nunique_values.plot.bar(logy=True, figsize=(15, 4), title=\"Unique values per feature\",  color='#753742');\nplt.savefig('foo.png')\n\n\n\n\n\n\nQuality Investigation\n\n# Check number of duplicates while ignoring the index feature\nn_duplicates = df_X.drop(labels=[\"Accident_Index\"], axis=1).duplicated().sum()\nprint(f\"You seem to have {n_duplicates} duplicates in your database.\")\n\nYou seem to have 22 duplicates in your database.\n\n\n\n#  Extract column names of all features, except 'Accident_Index'\ncolumns_to_consider = df_X.drop(labels=[\"Accident_Index\"], axis=1).columns\n\n# Drop duplicates based on 'columns_to_consider'\ndf_X = df_X.drop_duplicates(subset=columns_to_consider)\ndf_X.shape\n\n(363221, 67)\n\n\nYou can check this link for guide"
  },
  {
    "objectID": "myblog/blog.html",
    "href": "myblog/blog.html",
    "title": "Blog",
    "section": "",
    "text": "A generalization of the F-measure that adds a configuration parameter called beta\n\n\n\n\n\n\nJun 10, 2022\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nNearest neighbor classifiers are defined by their characteristic of classifying unlabeled examples by assigning them the class of similar labeled examples.\n\n\n\n\n\n\nJun 8, 2022\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nIn last few decades we have seen rise of multiple languagues.\n\n\n\n\n\n\nJun 11, 2021\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nA hypothesis testing is a way to test an assumption about a population parameter.\n\n\n\n\n\n\nApr 8, 2021\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nPrinciples and process for democratizing ML projects\n\n\n\n\n\n\nJul 13, 2019\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nEDA is a way of summarizing, interpreting and visualizing the information hidden in rows and column format.\n\n\n\n\n\n\nJun 11, 2019\n\n\nVidyasagar Bhargava\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "myblog/posts/hypothesis-testing/index.html",
    "href": "myblog/posts/hypothesis-testing/index.html",
    "title": "Hypothesis Testing",
    "section": "",
    "text": "During hypothesis testing we confirm whether results we got is by chance ? If yes then experiment won’t be repeatable and so has little use.\nThere are two ways of doing hypothesis testing.\nLet’s start with business case problem.\nQ :- Suppose that a PM claims that users on average spend about Rs. 50 per month on Amazon. However, you doubt this claim, and you believe that the average should be higher. So you sample 100 users and learn that the sample mean is Rs. 85. Would you reject the PM’s claim? Assume population standard deviation is 20."
  },
  {
    "objectID": "myblog/posts/hypothesis-testing/index.html#p-value-approach",
    "href": "myblog/posts/hypothesis-testing/index.html#p-value-approach",
    "title": "Hypothesis Testing",
    "section": "P-Value approach",
    "text": "P-Value approach\n\nHypothesis\nSignificance level\nTest Statistics\n\nProbability of observing test statistics\nStatistical Decision\n\n1. Hypothesis\nHo : the average spend per user is Rs. 50\nHa : the average spend per user is greater than Rs. 50\n2. Significance level\n\\(\\alpha = 0.05\\)\n3. Test Statistics\n\\[\nZ-statistics  = \\frac{\\overline{X}-\\mu}{\\sigma/\\sqrt{n}}\n\\]\n\\[\n= \\frac{85-50}{20/\\sqrt{100}} =\\frac{35}{2} = 17.5\n\\]\n4. Probability of observing test statistics\nLooking into standard normal distribution table.\n\\(P-value < 0.0001 < \\alpha = 0.05\\)\n5. Statistical Decision\nAt alpha = 0.05 there is statistical significance to reject PM’s claim and conclude that the average spend per user is greater than Rs. 50.\nBusiness Case problem\nQ :- A Principal claims that the student in his school are above average intelligence. A random sample of 30 IQ scores have a mean of 112.5. Is there sufficient evidence to support the principal’s claim? The mean population IQ is 100 with standard deviation is 15."
  },
  {
    "objectID": "myblog/posts/hypothesis-testing/index.html#critical-value-approach",
    "href": "myblog/posts/hypothesis-testing/index.html#critical-value-approach",
    "title": "Hypothesis Testing",
    "section": "Critical Value Approach",
    "text": "Critical Value Approach\n\nHypothesis\nSignificance level\nTest Statistics\n\nCritical Value\nStatistical Decision\n\n\n\n\n\n\n1. Hypothesis\nHo : the average IQ score is 100\nHa : the average IQ score is greater than Rs. 100\n2. Significance level\n\\(\\alpha = 0.05\\)\n3. Test Statistics\n\\[\nZ-statistics  = \\frac{\\overline{X}-\\mu}{\\sigma/\\sqrt{n}}\n\\]\n\\[\n= \\frac{112.5-100}{15/\\sqrt{30}} = 4.56\n\\]\n4. Z Critical Value\nLooking into standard normal distribution table.\n\\(Z Critical-value = 1.645\\)\n5. Statistical Decision\nAt alpha = 0.05 test statistics is greater than Z Critical value hence we can reject null hypothesis."
  },
  {
    "objectID": "myblog/posts/test/index.html",
    "href": "myblog/posts/test/index.html",
    "title": "Observable JS",
    "section": "",
    "text": "viewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfiltered = data.filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n\n\n\n\n\n\n\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)"
  },
  {
    "objectID": "myblog/posts/top-languages/index.html",
    "href": "myblog/posts/top-languages/index.html",
    "title": "Most Popular programming languages 2004-2021",
    "section": "",
    "text": "chart\n\n\n\n\n\n\n\ndata = FileAttachment(\"pypl.csv\").csv({typed: true})\n\nformatNumber = d3.format(\".1%\")\n\n\nformatDate = d3.utcFormat(\"%b %Y\")\n\ntickFormat = \"%\"\n\nk = 2\n\nimport {chart, viewof replay, d3} with {k, data, formatNumber, formatDate, tickFormat} from \"@d3/bar-chart-race\""
  }
]